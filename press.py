import cirq
import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
from cirq.circuits import InsertStrategy
import scipy
from scipy import linalg
from cirq import protocols
from cirq.testing import gate_features
import random

unit = np.array([[ 1.51202200e-01-1.42367680e-02j, -1.90893543e-02+1.25328606e-03j,
       -3.96016512e-11-4.60664126e-10j,  6.87723817e-02+6.85687871e-01j,
        4.43369117e-04+5.94624162e-03j, -4.10812447e-12-2.69348281e-11j,
        4.11401233e-13-1.32159645e-13j,  6.62939096e-12+7.30939618e-11j,
        1.70174420e-10-7.54004391e-11j,  1.72352785e-01+6.82886843e-01j,
        4.54918703e-04+1.74052474e-03j,  2.46289280e-09-5.86880021e-10j,
        4.49128215e-02-1.22267691e-02j, -1.91149337e-02+4.21869941e-03j,
       -3.88618424e-12+5.19268431e-13j,  2.99255325e-09-5.35308232e-10j,
       -7.72072786e-16+1.02578690e-14j, -3.40210616e-10+2.51525742e-09j,
        1.81707664e-09-1.42476787e-09j, -2.00153661e-11+9.58719007e-12j,
       -5.12950400e-18-5.94033053e-18j, -2.26949299e-09-4.51551225e-10j,
       -2.78461638e-12-3.36249527e-11j, -8.90363766e-18-1.97907381e-18j,
       -1.89105453e-10-1.81207712e-10j,  9.14204862e-11+7.99002407e-11j,
       -5.09169038e-18-6.95229491e-18j], [-2.40096451e-02-1.20591789e-02j,  1.33286124e-01+7.30992531e-02j,
        2.15655373e-10-3.94300369e-10j, -1.82620928e-03+3.68480512e-03j,
       -3.23386760e-01+6.06822832e-01j, -2.30246882e-12-4.16523611e-12j,
       -2.94165374e-14-1.51415350e-14j, -3.59038968e-11+2.03257084e-09j,
        2.08915046e-09+1.16790199e-09j, -3.50490975e-04+1.18518019e-03j,
       -2.36917409e-01+6.64249851e-01j,  2.38467606e-09+8.53168019e-10j,
       -2.61719199e-02-8.52557947e-03j,  4.35916783e-02+1.55588722e-02j,
        6.40131205e-13+3.84616359e-13j, -5.82620220e-11-5.10939939e-11j,
       -2.63836823e-13+7.90691402e-13j,  4.67790979e-11-1.41516123e-10j,
        8.17498884e-12-8.02551851e-12j, -2.20987297e-09+2.45840329e-10j,
        2.57993103e-19-4.26321074e-19j, -4.51397707e-11-1.91132156e-11j,
       -2.06616803e-09-1.59513315e-09j,  9.21682949e-19+5.17074630e-19j,
        2.50684643e-11+1.40639702e-10j, -5.34792110e-11-2.54125913e-10j,
        5.63181481e-18-7.17568499e-18j], [-1.06514415e-10+5.35236924e-10j, -1.14615182e-10+5.33692330e-10j,
       -1.48823023e-01-3.11871559e-02j, -4.33524501e-13+2.77199804e-11j,
        3.32548072e-12+3.22537796e-12j, -1.42014199e-01+6.75593869e-01j,
       -1.63355805e-10+3.11934716e-11j,  2.42744346e-09+4.90410852e-10j,
        1.10921222e-10-5.34433602e-10j, -2.52464526e-09-1.16768538e-10j,
       -2.52529721e-09-1.47906914e-10j,  4.18689492e-02-7.02350767e-01j,
        4.27094419e-12-1.47590137e-11j,  3.53399614e-13-4.27980452e-13j,
        4.62656176e-02+2.88889293e-03j,  9.99640178e-10-2.26290033e-09j,
        7.33049188e-12-1.66635251e-10j,  4.95299750e-10+2.30260217e-10j,
        2.81777389e-18+8.26930445e-18j, -4.80586203e-20+1.83977337e-19j,
       -2.15626482e-09+8.29603397e-10j, -7.73465354e-18-4.46524075e-18j,
       -6.22422013e-19-1.34901099e-18j, -2.03799009e-09-1.09748598e-09j,
        3.10894651e-18+8.07420429e-18j,  3.91754804e-18-7.31903889e-18j,
       -1.79230758e-10+1.00746536e-10j], [-7.04946200e-02-6.85102555e-01j, -3.03177677e-04-4.12289453e-03j,
       -2.48216470e-09+2.21354588e-10j, -1.51111584e-01+1.49462854e-02j,
        2.66970462e-02-2.08086618e-03j,  4.07060175e-12-3.47873664e-13j,
       -7.74503235e-14-8.45169201e-13j,  6.03291642e-11-3.49077101e-11j,
       -1.14004588e-09-2.36009661e-09j, -4.43600834e-02+1.19787985e-02j,
        2.67978159e-02-6.14828179e-03j,  2.07341447e-11+7.86359990e-11j,
       -1.77063147e-01-6.83791925e-01j, -3.30233519e-04-1.22528252e-03j,
        4.80160089e-12+2.70150314e-11j,  3.67539487e-10-2.29582287e-09j,
        3.17142235e-14-7.82126340e-15j, -5.43674257e-10-7.68827374e-11j,
        3.51375069e-10+1.05734372e-10j,  5.04488439e-11+5.37611687e-11j,
        9.42076750e-18-2.71811339e-19j, -5.58648279e-10-1.30543211e-09j,
       -7.53777048e-12+9.80270060e-11j,  4.99329176e-19-1.89746090e-18j,
       -2.74749222e-09+2.87662759e-09j, -4.95790315e-12+6.11254249e-12j,
       -7.78240775e-18+1.07115917e-18j], [ 2.62473837e-03-5.25120227e-03j,  3.28611104e-01-6.06998150e-01j,
       -2.20068211e-09-1.18182200e-09j,  1.63865945e-02+8.16813853e-03j,
       -1.33549261e-01-7.19610840e-02j, -2.44408514e-12-1.54938642e-12j,
        3.99764680e-15-1.46048989e-14j, -2.34009569e-09-1.20662471e-09j,
       -2.59627622e-10+4.73188885e-10j,  1.77672159e-02+5.79244058e-03j,
       -4.39270030e-02-1.43586020e-02j, -3.24172563e-11+9.28371384e-11j,
        4.81606060e-04-1.75364482e-03j,  2.38643391e-01-6.63799070e-01j,
        3.45885343e-12-8.46055277e-12j,  3.21987019e-11-7.70304563e-11j,
       -2.37457092e-13-1.81108719e-13j, -2.31495630e-09-8.19408788e-10j,
       -1.39321525e-12-7.51901831e-11j,  1.42800944e-10-7.09869564e-10j,
       -1.02299113e-18-6.64869623e-19j, -3.92237515e-11+4.27745494e-11j,
        4.44856287e-10+5.80176568e-10j,  3.78459095e-19-1.40860583e-17j,
       -9.20905266e-12+1.98277574e-12j, -3.87907989e-09+8.37137400e-10j,
       -2.33721385e-18+1.69791785e-18j],[ 2.43080540e-09+4.70367230e-10j,  2.42489750e-09+5.11418970e-10j,
       -1.40275389e-01+6.75845878e-01j, -1.35213726e-12-1.47205444e-11j,
        2.00074679e-12+1.04863870e-12j, -1.48885128e-01-3.04635627e-02j,
        4.83540238e-10+2.48702496e-09j, -1.06939303e-10+5.34841990e-10j,
       -2.42720855e-09-4.89324574e-10j,  6.72547401e-12-1.64438532e-10j,
        7.87691586e-12-1.64913904e-10j,  4.56528343e-02+2.96380042e-03j,
        3.85812348e-12-2.72643297e-11j, -9.35773979e-13+9.23572390e-12j,
        3.76497769e-02-7.04893566e-01j,  4.98789349e-10+2.20103667e-10j,
       -2.53314444e-09-1.15894582e-10j,  1.03303925e-09-2.25270566e-09j,
        7.72758537e-18+4.49822177e-18j,  9.29322933e-19+4.35725176e-19j,
       -3.05096164e-10-2.04200850e-10j,  1.02443115e-18-1.70405842e-18j,
       -1.31064033e-17+6.81910188e-18j, -1.51015715e-10-1.41271933e-09j,
        7.34567015e-18+9.18835592e-19j,  5.16364239e-18-5.88441674e-19j,
        1.53676541e-09+2.73731677e-09j], [-4.40900035e-10+4.75833361e-11j, -1.37883090e-13-1.18770505e-13j,
        8.71946250e-12-9.17932815e-13j, -2.08186906e-12-2.49269857e-13j,
       -2.60927543e-13-2.64881324e-12j,  4.40722079e-10-4.34640454e-11j,
        5.35748409e-01+8.35314183e-01j,  3.29698664e-05-3.84483302e-05j,
        1.18263110e-11+1.87956113e-11j,  5.28061396e-11-4.39918986e-10j,
       -1.65634829e-13+1.07649628e-13j, -6.59632331e-14-3.13666600e-12j,
        9.89473291e-14+3.13876732e-12j,  6.02770791e-14+6.07704369e-15j,
        1.14522011e-09+3.37324735e-09j,  1.22529437e-01+1.45048803e-02j,
       -1.08923795e-06-6.20248666e-06j,  2.73900659e-12+3.48342324e-13j,
        3.56229318e-09+8.53893607e-12j,  1.11841011e-13+1.88111391e-13j,
        1.06098503e-18-1.16574190e-17j,  9.96623989e-11-4.31567871e-10j,
        2.74698898e-13-2.05666566e-11j, -1.99195398e-19+1.57674945e-18j,
        3.01737328e-09-9.42319172e-10j, -9.03473166e-14-1.33668538e-13j,
       -1.21627106e-17-1.00240881e-17j], [ 9.25456706e-15-1.34616084e-13j,  3.56124779e-09+8.83015664e-11j,
       -1.58239902e-12-1.37470911e-12j, -1.27359000e-14+5.00666455e-13j,
       -2.48418028e-11-4.46085893e-12j,  3.56104548e-09+9.59741080e-11j,
        4.81479234e-05+1.57182590e-05j, -2.36941677e-02+9.92075970e-01j,
       -3.91216768e-13+2.15915625e-11j, -9.74823507e-15-1.90341912e-14j,
        8.97802492e-10-3.44670143e-09j,  4.54088943e-13-1.68499529e-11j,
        2.09400624e-11+5.16882038e-12j,  4.17979047e-13-1.68539072e-11j,
        2.90563546e-10-3.34331412e-10j,  5.31152333e-06-3.38304597e-06j,
        9.34097302e-02+8.06131297e-02j,  2.04279940e-12+1.74251217e-12j,
        1.83270668e-13-6.93691374e-14j, -2.94698708e-09-2.00130725e-09j,
       -6.47128712e-20-4.36793569e-20j,  1.19626161e-11-1.81476791e-11j,
        3.24181612e-10-3.01811653e-10j, -3.30141446e-18+1.08660752e-17j,
        8.88398384e-14-1.34675248e-13j,  3.02777004e-09+9.08358707e-10j,
        1.14639193e-18+1.18521648e-18j], [-2.48853830e-11+3.80165947e-12j, -2.39620255e-12+1.67085049e-12j,
       -2.99642425e-09+1.03884506e-09j, -4.36300720e-10-7.66802510e-11j,
        3.42882553e-09-9.66161501e-10j,  5.95170545e-16+1.80257175e-15j,
       -6.16753560e-12-2.13333790e-11j, -5.69683935e-12-2.08297830e-11j,
        2.67263600e-01+9.55691537e-01j,  1.10833337e-13+1.11423428e-12j,
        1.69690374e-11-1.71393958e-11j, -2.09861470e-13+7.69514204e-14j,
       -1.96954544e-10-3.55675965e-09j,  1.77981535e-10-4.05591557e-10j,
        4.48758832e-12+1.51508426e-11j, -2.53590313e-12-1.09221121e-12j,
       -2.45036921e-12-1.09765214e-12j,  1.12890265e-01+4.97960093e-02j,
       -3.09230997e-18+1.35840089e-17j,  7.36966879e-20+2.44027355e-20j,
       -3.40325984e-09-1.05273512e-09j,  6.06135754e-19-1.44770163e-18j,
        8.10706390e-20+1.13518951e-17j, -2.21829252e-10+3.83374105e-10j,
       -1.64451787e-17+1.15976316e-17j, -1.44747199e-18-7.92115015e-19j,
        3.16105154e-09-1.61282758e-11j], [-6.96549146e-01-1.25119822e-01j, -4.05397597e-04-4.81256396e-05j,
       -4.59326137e-10+2.49862153e-09j, -2.52649305e-03+1.52889772e-02j,
        5.66362937e-03-2.74093145e-02j,  1.84535687e-13-2.99150327e-12j,
       -8.41678616e-13-1.58784131e-13j,  1.51035262e-11+8.43745371e-11j,
        2.36824573e-09-5.13559373e-10j, -1.29206367e-03+9.10720379e-02j,
       -1.46419247e-03+2.76444077e-02j,  4.11052339e-10+1.13429363e-11j,
        6.99109908e-01+1.87556840e-02j, -2.54977334e-03-1.49105868e-04j,
       -3.90027890e-12+1.68667654e-12j, -2.01110249e-09-9.80461161e-10j,
       -1.69706681e-15+3.47220953e-14j, -2.31967939e-11+5.98406417e-11j,
       -2.21333164e-10-1.32411305e-10j,  6.96041495e-11-3.51342540e-11j,
       -3.78943136e-18+9.19133903e-18j, -9.78762272e-10+3.89891664e-10j,
        9.11965852e-11+4.01367011e-11j, -1.96548438e-19-7.96893408e-20j,
       -2.02729922e-09-3.37928348e-09j,  8.67517869e-12+1.32381910e-11j,
       -2.91763272e-20-8.88432322e-18j], [-4.77201697e-04-3.65097051e-04j, -5.08597993e-01-4.90716568e-01j,
       -1.74794111e-09+1.84165198e-09j,  1.28933256e-02-1.42472269e-02j,
       -1.02426849e-02+1.14102459e-02j,  8.19631786e-13-1.71290647e-12j,
        7.09596922e-15+2.36011984e-15j, -1.87075946e-09+2.13815762e-09j,
        2.99669934e-11+3.41886853e-11j, -1.04909823e-02+1.58726407e-02j,
       -5.19932027e-02+7.47719976e-02j,  3.25822505e-10+2.23118814e-10j,
       -2.95336250e-03-1.97772626e-03j,  5.71869113e-01+4.05234981e-01j,
        1.79503692e-11+1.19582968e-11j,  5.58185709e-11+3.57159881e-11j,
       -2.74870225e-13+2.30566398e-13j,  1.51937115e-09-2.10516075e-09j,
       -7.49690450e-11-1.73773122e-11j, -2.10199368e-10-2.51349398e-10j,
       -9.02135224e-19+8.24024516e-19j,  3.87599565e-11+5.51734952e-11j,
        9.69075312e-10+1.33127165e-10j,  1.49253936e-17-2.54000310e-18j,
       -1.74709951e-12+1.83820984e-11j,  2.07090043e-10-3.94662189e-09j,
       -5.98656756e-19+3.76844205e-18j], [ 1.13238686e-09-2.27431651e-09j,  1.15909731e-09-2.25816911e-09j,
        6.31806262e-01+3.17822074e-01j, -1.37530386e-11-4.73063600e-12j,
       -7.86828797e-14+2.11046496e-12j, -7.72069975e-03+1.36161897e-02j,
       -2.50956923e-09-1.87194661e-10j,  4.94362355e-11+2.60913418e-11j,
       -1.15010374e-09+2.26540378e-09j, -3.12082204e-10-9.77279197e-11j,
       -3.10681582e-10-1.02244164e-10j,  2.80808599e-02-8.66522625e-02j,
        4.75354420e-12-2.45281760e-12j, -2.05016605e-11-6.44474404e-12j,
        6.66422923e-01+2.17129613e-01j,  3.54499412e-11-4.28138279e-11j,
        7.82843087e-10-2.38930883e-09j, -1.94746663e-09-1.62808853e-09j,
       -4.74155439e-18+6.57749068e-18j,  6.70983649e-19-7.99503822e-19j,
        1.72910277e-10+1.91646425e-10j, -1.28452877e-19-1.82513196e-19j,
       -2.25035748e-18-7.22819366e-18j, -1.05069539e-09+8.53411171e-11j,
       -2.54824149e-18+8.74101324e-18j, -2.81885406e-19-3.70234129e-18j,
       -3.03318724e-09+7.47915273e-10j], [ 1.48943931e-03-1.55453939e-02j, -3.90844017e-03+1.87708403e-02j,
        2.62459358e-11+8.71026512e-12j,  6.97261032e-01+1.22018607e-01j,
        6.11056993e-04+3.68397359e-05j, -3.71246658e-12-2.47730802e-12j,
        5.46296975e-14+2.23705456e-13j,  7.76497904e-11+1.17899380e-11j,
       -6.33268105e-11-3.22576258e-10j, -7.01860087e-01-1.55429873e-02j,
        3.53537323e-03+2.02617641e-04j, -6.53645738e-11+2.51038616e-09j,
        1.85936354e-03-9.09689108e-02j,  1.02937575e-03-1.90177499e-02j,
       -8.04962397e-14+1.59179504e-12j, -2.15294641e-11+2.46885589e-09j,
        1.19196614e-14+3.66348090e-15j,  2.25982908e-09+1.01449455e-09j,
       -9.39507166e-10-2.13537789e-09j, -2.61126776e-12+8.45247367e-12j,
       -6.57295686e-18+3.75106564e-18j, -9.73277033e-10+2.31105748e-09j,
       -2.56992918e-11-2.35674895e-11j, -4.86684920e-18+7.54837645e-18j,
       -4.39765600e-10+2.63294716e-10j, -9.86391917e-11+6.59286896e-11j,
       -8.77158496e-18+3.17508422e-18j], [-1.84811366e-02+2.00004565e-02j,  1.03436926e-02-1.18876504e-02j,
        2.89348415e-11+2.89162731e-11j,  3.66477186e-04+2.52119929e-04j,
        5.07989874e-01+4.94358939e-01j,  2.65253196e-11+1.96135810e-11j,
       -2.25441883e-14+2.41249717e-14j, -2.37905498e-09-9.79621329e-10j,
        1.79773292e-09-1.90307504e-09j,  1.97290721e-03+1.34605230e-03j,
       -5.69791588e-01-4.07474101e-01j, -1.43429150e-09+2.06045779e-09j,
        1.50583421e-02-2.22743035e-02j,  5.25317669e-02-7.43064766e-02j,
        1.04360939e-12-1.34237050e-12j, -6.26609847e-11+3.97618546e-11j,
       -7.20688965e-13-5.11543760e-13j, -2.64973542e-10-1.87821083e-10j,
       -9.13856754e-12+4.31505560e-12j, -4.06776342e-10+2.28780567e-09j,
        1.66379558e-19+2.99406786e-19j, -2.00353600e-11+3.12151890e-11j,
       -2.11566311e-09+1.40749586e-09j,  1.24219005e-19-1.77406972e-18j,
       -1.38825746e-10-1.28817782e-11j, -5.11653621e-10-2.82334705e-11j,
       -5.28873723e-18-7.75769762e-18j], [ 5.15947141e-11+2.23137249e-11j,  5.11346035e-11+2.40299754e-11j,
       -6.80384359e-03+1.41664324e-02j,  2.95565078e-12+3.09586381e-12j,
       -3.10383128e-11-1.13754406e-11j,  6.33127685e-01+3.14900230e-01j,
       -2.48985714e-11+3.25859037e-10j,  1.13482134e-09-2.27261753e-09j,
       -5.13825740e-11-2.26604765e-11j,  7.60735409e-10-2.40545536e-09j,
        7.99929865e-10-2.39004692e-09j,  6.69706418e-01+2.14759727e-01j,
        1.52629275e-11+2.47342134e-12j, -2.66343446e-13+1.84791338e-12j,
        2.86106475e-02-8.64298995e-02j, -1.96984099e-09-1.60677115e-09j,
       -3.10690683e-10-1.01511043e-10j,  3.38648480e-11-4.48551676e-11j,
        9.24801180e-18-3.39887272e-19j,  1.16881352e-20-3.70005614e-20j,
        2.72022365e-10+2.31831566e-09j, -6.53815715e-18+6.44515279e-18j,
       -1.44564882e-18+2.96507387e-19j, -1.60872712e-09+1.92478333e-09j,
        9.42184900e-18-8.22648727e-19j, -6.91607583e-18-5.75602356e-18j,
        9.70800403e-11+3.93434568e-10j], [ 3.43878637e-09+9.29292839e-10j, -1.16774451e-14-1.79018494e-14j,
        1.05107081e-12+2.88963167e-13j,  1.48562186e-11+7.97649156e-12j,
       -5.82470235e-12+2.06075225e-11j, -3.42801603e-09-9.70887611e-10j,
        2.40644087e-02+1.21015530e-01j,  5.56242744e-06-2.95240259e-06j,
        5.15009838e-13+2.71261211e-12j, -1.68510324e-09+3.13854014e-09j,
        1.20510443e-13+5.80689080e-14j, -8.72888492e-12+2.36807910e-11j,
        8.43234829e-12-2.37895426e-11j, -4.38807042e-13-2.35760838e-13j,
       -2.04974628e-11+4.42479063e-10j, -8.74737487e-01-4.68626154e-01j,
       -1.00699398e-05+4.96375110e-05j, -1.94829445e-11-1.06560551e-11j,
        4.11913625e-10+1.62802176e-10j, -4.10254184e-13-2.57405232e-13j,
       -2.99062517e-18-1.26301237e-17j, -2.01424873e-09+2.93823611e-09j,
        1.14188386e-12-2.31172109e-12j,  6.12945083e-18-1.12209302e-17j,
        3.53314095e-09-1.03176678e-09j, -1.02289352e-13-1.57568058e-13j,
       -8.82092459e-19-1.73514635e-18j], [ 1.75687329e-13-9.06067844e-14j,  4.07899166e-10+1.72219725e-10j,
        7.81116657e-12+1.49403337e-11j, -2.19951667e-14+5.87489778e-14j,
       -2.66684178e-12-1.64648718e-12j,  4.07628133e-10+1.72938682e-10j,
        4.85867625e-06+4.00631317e-06j, -4.78064980e-02+1.13747058e-01j,
       -1.02605616e-12+2.48124703e-12j,  3.50089577e-14+1.78576770e-13j,
        2.61063002e-10-3.57023229e-10j,  8.18375934e-13-1.92835828e-12j,
        2.18822824e-12+1.54828151e-12j,  8.14639523e-13-1.93117523e-12j,
       -3.15688831e-09+1.65050779e-09j, -4.97069562e-05+9.72135235e-06j,
       -4.62475998e-01-8.78004609e-01j, -1.01740422e-11-1.90482935e-11j,
       -1.61172786e-13-4.70111597e-13j, -2.50178196e-10-3.65496382e-10j,
       -6.01562396e-21-8.32515635e-21j,  2.22439289e-12-1.37305254e-12j,
       -3.31391497e-09+1.30705639e-09j, -3.99808715e-18+1.25411067e-17j,
        1.06338174e-13-1.54864459e-13j,  3.50521761e-09+1.12297694e-09j,
       -4.59283801e-18-1.18813139e-17j], [-3.05293967e-12-6.90378348e-13j,  2.28494593e-11-5.46857219e-12j,
       -3.45584252e-09-1.94222887e-09j,  3.04119968e-09+1.85608281e-09j,
        4.40740876e-10+4.39272053e-11j, -4.25556087e-15+4.44698191e-15j,
        2.55215309e-13-2.74928994e-12j,  2.86818475e-13-2.66962260e-12j,
       -1.24781793e-02+1.22752391e-01j,  2.44418471e-12-8.66774978e-12j,
        2.74254547e-12-1.21291913e-12j, -9.16507688e-13-8.97867322e-13j,
        1.38766871e-10-4.20607525e-10j, -2.52427532e-09+2.51362984e-09j,
       -3.13102250e-12+1.03533649e-11j,  1.57766190e-11+1.56284947e-11j,
        1.51202536e-11+1.54179041e-11j, -6.98874031e-01-7.04521990e-01j,
       -1.44227925e-18-1.04592614e-17j,  1.23517659e-20-1.29085494e-21j,
       -3.46075400e-10-2.76433961e-10j, -8.79423422e-18+9.06071424e-18j,
       -1.59472678e-19+1.31658806e-17j,  2.78727390e-09-2.21845292e-09j,
       -2.50431930e-18+5.98018283e-19j,  7.91452968e-18+9.97958729e-18j,
        3.68037612e-09+4.95919973e-11j], [ 1.38243542e-09-3.31950827e-10j, -7.48483541e-12-7.75197522e-12j,
       -1.14943027e-18-4.98303450e-18j, -2.92737881e-09-1.83938356e-09j,
       -1.00842746e-10+3.32126473e-11j,  4.92858217e-19+1.18652953e-19j,
        3.05760802e-11-1.54081854e-10j, -2.52997835e-11+1.17297886e-10j,
       -3.57606583e-19+6.55318625e-20j, -8.70860406e-12+1.41961992e-11j,
        1.69491846e-13+7.40635889e-13j,  1.79823361e-21-2.29708800e-21j,
       -1.56453161e-12-9.97744426e-12j, -3.47431521e-14+4.03680737e-14j,
        6.44111659e-19-1.36790339e-19j,  2.86092848e-09+2.16049840e-09j,
       -4.77949734e-12-3.68238644e-12j,  5.91269845e-19+4.79016162e-20j,
        3.14518777e-02+3.04115329e-02j,  1.93294148e-02+1.94571363e-02j,
        1.10667416e-10-1.11434219e-10j, -6.85063102e-01+7.26678697e-01j,
        1.16044208e-03-1.20738022e-03j,  1.17615379e-11-1.96335781e-11j,
       -1.08823956e-10+1.12748006e-10j,  3.66854795e-12+3.49979209e-12j,
        1.14809387e-10-1.07493506e-10j], [ 8.39586899e-12+1.58787343e-11j,  1.34593609e-09+5.32742658e-10j,
        1.89881390e-18-4.78753118e-18j, -1.01156427e-10-4.73016946e-11j,
        1.66285463e-09+3.26822672e-09j,  1.11211445e-17-5.95576595e-18j,
       -8.03571118e-11+8.63861924e-11j,  1.11590755e-10-1.10555195e-10j,
        1.19315312e-17-5.57042898e-18j, -6.79361890e-14+2.71412018e-13j,
        1.56615983e-11-8.15083305e-12j, -2.89148249e-20-5.31958719e-20j,
        7.94416325e-14-4.27581880e-14j,  5.90425611e-13-3.52889275e-12j,
       -1.26944704e-17+3.96017862e-18j,  1.60189536e-12+3.88151331e-12j,
       -1.16066756e-09-3.39048536e-09j,  1.18349636e-17-4.44250132e-18j,
       -9.42456345e-03-3.74632808e-02j, -9.04048228e-03-4.28220041e-02j,
       -1.35464789e-10+3.18309593e-11j, -1.11740991e-03+3.24552701e-04j,
        9.74079279e-01-2.18541380e-01j, -8.04633127e-10-3.49286328e-09j,
        1.34943355e-10-3.40664871e-11j,  7.87730768e-10+3.49683665e-09j,
        6.63113420e-10+3.52598628e-09j], [-2.76164109e-19+5.10441559e-18j, -3.60533976e-19+5.18627179e-18j,
       -1.41976951e-09-8.87302742e-11j, -2.14162206e-20-5.62551006e-20j,
       -9.99016886e-18+8.30781321e-18j, -2.26014629e-09-2.61783659e-09j,
        3.77204353e-19+4.16193113e-19j, -9.37427649e-18+8.14536022e-18j,
        7.44469302e-11-1.38419303e-10j, -2.52590628e-21-1.65682137e-21j,
        3.66856202e-20+4.50628553e-20j, -1.22808453e-11+1.03662413e-11j,
       -1.29446049e-20+8.85721519e-19j, -1.04028105e-17+7.56540116e-18j,
        5.95552271e-13+3.43582083e-12j, -4.46587542e-19-8.73279657e-20j,
        1.04608190e-17-7.49085731e-18j, -2.10242418e-09-2.90546433e-09j,
       -1.18971618e-10+6.68347918e-11j,  4.54317646e-13+8.33897074e-13j,
       -2.11690228e-02-3.83244650e-02j, -1.93393571e-11+1.12278407e-11j,
        1.75556932e-09+3.12711192e-09j, -8.68337724e-01+4.94037150e-01j,
       -1.36477881e-10+7.79489273e-11j, -1.78305324e-09-3.11169272e-09j,
        2.80912782e-13-2.23429977e-13j], [-1.93555582e-10+4.14334066e-10j, -2.75503645e-11-4.26948961e-11j,
        1.24939037e-18+7.28114915e-19j, -6.62996633e-10-3.33609456e-09j,
        7.17411282e-11-1.21810742e-10j, -3.46589932e-19-1.28829629e-19j,
       -3.52410431e-09-6.54735358e-10j, -5.14280254e-12-8.65810867e-13j,
       -7.13650239e-18+1.06604449e-17j, -7.92063675e-12+3.15847443e-12j,
       -5.87820049e-13-3.38393385e-13j, -2.86744565e-22-2.65909333e-20j,
        2.11140736e-12+9.14474566e-13j, -8.83707319e-14+8.84876074e-14j,
       -3.43388628e-18-1.51860864e-17j, -9.31550456e-11+1.26519150e-10j,
       -8.67592792e-11+1.08832943e-10j, -1.67500427e-19-1.20511172e-17j,
        6.85117966e-01-7.26088174e-01j, -7.98471393e-04+8.82102794e-04j,
       -2.58489081e-09-2.48200961e-09j, -3.22084697e-02-2.96340967e-02j,
       -2.74033839e-02-2.72305900e-02j, -8.21734255e-11+8.46353889e-11j,
        2.60877084e-09+2.45702394e-09j,  8.32972640e-11-8.35655514e-11j,
       -2.48067085e-09-2.58791972e-09j],[ 3.35989779e-11-3.64902246e-11j,  3.48696287e-10-1.17160359e-10j,
        8.69875880e-20-4.59292221e-20j, -8.18177584e-11+3.86757599e-11j,
        1.03851322e-09-2.99777453e-09j, -8.78100183e-18+9.57277614e-18j,
       -3.99572191e-12-3.39331299e-12j, -2.55359591e-09-2.51538035e-09j,
       -1.08267654e-17-3.79428185e-18j,  1.92496279e-13+3.93616833e-13j,
       -2.06889004e-11-9.33563249e-12j,  4.51773045e-20+4.14200983e-20j,
       -2.39964597e-13-2.58816529e-13j, -6.79984363e-13-1.73334501e-12j,
       -1.81519626e-19-5.54114109e-19j,  8.85200619e-11-3.35242196e-11j,
        1.47956096e-10-5.26622608e-11j,  2.02596020e-19+5.15021547e-19j,
        1.64272700e-03-4.84509328e-04j, -9.74549685e-01+2.18190473e-01j,
       -2.28686178e-11-1.06511703e-12j,  6.56699720e-03+2.53921837e-02j,
        1.00940903e-02+4.25685251e-02j,  1.52488643e-10-3.76898007e-11j,
        1.74696552e-12+5.90570734e-12j, -1.51591302e-10+3.61024924e-11j,
       -1.54343178e-10+3.09072753e-11j],[-1.21404639e-18-1.21491061e-18j, -2.34092913e-19-7.03662182e-21j,
        3.06811852e-10-3.39593656e-10j,  6.77475564e-21-7.41756879e-20j,
       -6.32340075e-18+1.10832559e-17j,  3.44788169e-10-3.38563466e-09j,
        9.39144300e-18-8.72207271e-18j, -1.20887649e-17-1.16392624e-18j,
       -3.17893256e-09-1.66021041e-09j, -8.41349541e-21+2.69754218e-20j,
        2.79436172e-21+9.04205052e-20j, -2.35367868e-11-3.95995432e-12j,
        2.01856393e-17+6.07281827e-19j, -3.37045343e-19-4.51799355e-19j,
       -1.46273362e-12-1.40927324e-12j, -3.33223011e-18+1.13203430e-17j,
        3.33834254e-19+4.54411327e-19j,  1.26199875e-10-9.36794430e-11j,
        1.79966508e-09+3.10308360e-09j,  1.89617210e-11-1.06337664e-11j,
       -8.68561017e-01+4.93644474e-01j, -4.35873792e-13-7.26470991e-13j,
       -1.36532117e-10+7.88500248e-11j, -2.21121610e-02-3.77881526e-02j,
        1.81641765e-09+3.09233532e-09j,  1.35407287e-10-7.97941938e-11j,
       -1.08010646e-12+6.33052085e-13j],[-5.14517852e-12-3.42415865e-11j, -7.25953861e-16+6.60689125e-16j,
       -7.95803348e-19+1.25524701e-18j, -9.73964744e-19+2.38379288e-18j,
        1.46074693e-13+5.08321169e-14j,  2.51515335e-18+1.15407208e-17j,
        1.80760248e-09-3.07414560e-09j, -1.76802449e-13-4.32439424e-14j,
        1.26799493e-17+2.44609733e-18j, -1.03861136e-15-1.41032240e-16j,
       -8.59205859e-12+2.00786308e-11j,  8.28798737e-20-1.14587080e-20j,
        5.45010966e-09-1.42134809e-09j, -1.49467697e-13-2.45562084e-13j,
       -1.16464933e-19+3.39287915e-20j, -4.04257850e-12+3.28972968e-09j,
        1.60871242e-13-4.80834867e-14j, -1.61117384e-21+7.41478028e-20j,
       -2.46195175e-09+2.61254649e-09j, -1.45724806e-15+1.46845130e-15j,
        2.49662453e-09-2.57943378e-09j,  2.57762368e-13+2.43172033e-13j,
       -2.01355281e-13-2.62152957e-13j,  1.63665045e-13+8.23568547e-14j,
        7.28403209e-01+6.85148716e-01j,  2.28018634e-05-4.56620027e-05j,
        1.61664448e-11+1.54727567e-11j], [-1.30900631e-15-1.18732870e-15j,  2.82592854e-12-1.90235419e-11j,
        3.17980222e-20-4.58162668e-20j, -1.54566152e-14-4.90687752e-14j,
        1.91369917e-18-1.42665728e-17j, -5.47588703e-18-1.15708843e-17j,
       -2.78132408e-14-1.79876536e-13j,  3.21876925e-09-1.53535743e-09j,
        7.04319344e-20-3.41232321e-20j,  1.76872162e-11-1.08799630e-11j,
        3.08655172e-16+1.07109324e-15j, -9.59068087e-20-3.88853920e-20j,
        1.69530174e-13-2.32160620e-13j,  5.31180367e-09+1.87337913e-09j,
        9.72517666e-18+6.74463006e-18j,  1.06062832e-13+1.30162314e-13j,
       -1.84499892e-09+2.72365871e-09j,  6.72187831e-18-1.89959024e-17j,
        4.77346334e-12+2.03512405e-11j,  2.74813125e-13+1.22274391e-12j,
        1.53953733e-14-1.82570229e-13j, -1.52471288e-16+4.62156175e-17j,
       -3.50246003e-09+7.86737266e-10j, -3.50424444e-09+7.79027533e-10j,
        5.09141943e-05+3.56206290e-06j,  2.20007931e-01+9.75498082e-01j,
        4.90990965e-12+2.12002412e-11j],[-1.04689912e-18+1.02146452e-18j, -5.16191153e-20-5.78576387e-20j,
        1.70612361e-11+8.50847302e-12j,  6.77262450e-19-1.17916557e-17j,
       -8.61009266e-18-9.47409052e-18j, -9.14425845e-22+8.57988369e-22j,
       -1.15571342e-17-5.76307344e-18j, -5.75210626e-20+5.20936792e-20j,
        2.62956329e-09-2.40898212e-09j, -2.94634307e-20+6.72834840e-21j,
       -4.48426738e-20+4.07401367e-20j, -1.21265273e-21+3.94359343e-21j,
        1.47131841e-21+1.04526705e-19j,  1.11702314e-17+3.44919787e-18j,
       -1.89123416e-10+4.44798989e-09j,  2.10572269e-20-7.05418489e-20j,
        1.59292372e-17+6.06450268e-19j, -9.68496403e-10+3.14393900e-09j,
        3.09747441e-09-1.81435103e-09j, -1.33602632e-23-2.37752365e-23j,
       -6.20156239e-13-1.08906530e-12j,  4.02245401e-24+6.86895754e-24j,
       -3.12498854e-09+1.76666276e-09j,  1.75109407e-13+3.08061685e-13j,
       -1.12573810e-11-1.93402709e-11j, -1.06738759e-11-1.89634216e-11j,
        4.95482245e-01+8.68618066e-01j]])

N = 5000
PMS1 = 0.999
PMS2 = 0.99

T0 = 25

zZ = np.array([[1, 0, 0]]).T
eE = np.array([[0, 1, 0]]).T
fF = np.array([[0, 0, 1]]).T
A = [zZ, eE, fF]

B = []
for i1 in range(3):
    for i2 in range(3):
        for i3 in range(3):
            for i4 in range(3):
                B.append(np.kron(np.kron(np.kron(A[i1], A[i2]), A[i3]), A[i4]))

X = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])
Y = np.array([[0, complex(0, -1), 0], [complex(0, 1), 0, 0], [0, 0, 1]])
Z = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])
id = np.eye(3)

z = np.array([[1, 0, 0]]).T
e = np.array([[0, 1, 0]]).T
f = np.array([[0, 0, 1]]).T
basis = [z, e, f]
paulies1 = [id, X, Y, Z]


def dag(matrix):
    return np.conj(matrix.T)


def EE(bas, i, j, p0, paulies, pinv):
    v1 = bas[i]
    v2 = bas[j]
    id = paulies[0]
    x = paulies[1]
    y = paulies[2]
    z = paulies[3]
    K0 = (1 - p0) ** 0.5 * id
    # K0 = id
    K1 = p0 ** 0.5 / 3 ** 0.5 * x
    # K1 = x
    K2 = p0 ** 0.5 / 3 ** 0.5 * y
    # K2 = y
    K3 = p0 ** 0.5 / 3 ** 0.5 * z
    # K3 = z
    # mat_sum = K0 @ dag(K0) + K1 @ dag(K1) + K2 @ dag(K2) + K3 @ dag(K3)
    # print(mat_sum)
    # print(np.trace(mat_sum))
    # print()
    # print(dag(K3))
    _rho = v1 @ (v2.T)
    # print(_rho)
    if i == 0 and j == 0:
        ksgfsg = 0
        # print('eij', K0 @ _rho @ dag(K0) + K1 @ _rho @ dag(K1) + K2 @ _rho @ dag(K2) + K3 @ _rho @ dag(K3))
    # print('ee', np.trace(K0 @ _rho @ dag(K0) + K1 @ _rho @ dag(K1) + K2 @ _rho @ dag(K2) + K3 @ _rho @ dag(K3)))
    # print()
    return (K0 @ _rho @ dag(K0) + K1 @ _rho @ dag(K1) + K2 @ _rho @ dag(K2) + K3 @ _rho @ dag(K3))


def E(bas, i, j, p0, paulies):
    v1 = bas[i]
    v2 = bas[j]
    id = paulies[0]
    x = paulies[1]
    y = paulies[2]
    z = paulies[3]
    # K0 = (1-p0)**0.5 * id
    K0 = id / 2
    # K1 = p0**0.5 / 3**0.5 * x
    K1 = x / 2
    # K2 = p0**0.5 / 3**0.5 * y
    K2 = y / 2
    # K3 = p0 ** 0.5 / 3**0.5 * z
    K3 = z / 2
    # mat_sum = K0 @ dag(K0) + K1 @ dag(K1) + K2 @ dag(K2) + K3 @ dag(K3)
    # print(mat_sum)
    # print()
    # print(dag(K3))
    _rho = v1 @ (v2.T)

    # print(_rho)
    if i == 0 and j == 0:
        cgjjjfjk = 0
    # print('e', np.trace(K0 @ _rho @ dag(K0) + K1 @ _rho @ dag(K1) + K2 @ _rho @ dag(K2) + K3 @ _rho @ dag(K3)))
    # print()
    return K0 @ _rho @ dag(K0) + K1 @ _rho @ dag(K1) + K2 @ _rho @ dag(K2) + K3 @ _rho @ dag(K3)


def nice_repr(parameter):
    """Nice parameter representation
        SymPy symbol - as is
        float number - 3 digits after comma
    """
    if isinstance(parameter, float):
        return f'{parameter:.3f}'
    else:
        return f'{parameter}'


def levels_connectivity_check(l1, l2):
    """Check ion layers connectivity for gates"""
    connected_layers_list = [{0, i} for i in range(max(l1, l2) + 1)]
    assert {l1, l2} in connected_layers_list, "Layers are not connected"


def generalized_sigma(index, i, j, dimension=4):
    """Generalized sigma matrix for qudit gates implementation"""

    sigma = np.zeros((dimension, dimension), dtype='complex')

    if index == 0:
        # identity matrix elements
        sigma[i][i] = 1
        sigma[j][j] = 1
    elif index == 1:
        # sigma_x matrix elements
        sigma[i][j] = 1
        sigma[j][i] = 1
    elif index == 2:
        # sigma_y matrix elements
        sigma[i][j] = -1j
        sigma[j][i] = 1j
    elif index == 3:
        # sigma_z matrix elements
        sigma[i][i] = 1
        sigma[j][j] = -1

    return sigma


class QuditGate(cirq.Gate):
    """Base class for qudits gates"""

    def __init__(self, dimension=4, num_qubits=1):
        self.d = dimension
        self.n = num_qubits
        self.symbol = None

    def _num_qubits_(self):
        return self.n

    def _qid_shape_(self):
        return (self.d,) * self.n

    def _circuit_diagram_info_(self, args):
        return (self.symbol,) * self.n


class QuditRGate(QuditGate):
    """Rotation between two specified qudit levels: l1 and l2"""

    def __init__(self, l1, l2, theta, phi, dimension=4):
        super().__init__(dimension=dimension)
        levels_connectivity_check(l1, l2)
        self.l1 = l1
        self.l2 = l2
        self.theta = theta
        self.phi = phi

    def _unitary_(self):
        sigma_x = generalized_sigma(1, self.l1, self.l2, dimension=self.d)
        sigma_y = generalized_sigma(2, self.l1, self.l2, dimension=self.d)

        s = np.sin(self.phi)
        c = np.cos(self.phi)

        u = scipy.linalg.expm(-1j * self.theta / 2 * (c * sigma_x + s * sigma_y))

        return u

    def _is_parameterized_(self) -> bool:
        return cirq.protocols.is_parameterized(any((self.theta, self.phi)))

    def _resolve_parameters_(self, resolver: 'cirq.ParamResolver', recursive: bool):
        return self.__class__(self.l1, self.l2, resolver.value_of(self.theta, recursive),
                              resolver.value_of(self.phi, recursive), dimension=self.d)

    def _circuit_diagram_info_(self, args):
        self.symbol = 'R'
        SUB = str.maketrans("0123456789", "₀₁₂₃₄₅₆₇₈₉")
        SUP = str.maketrans("0123456789", "⁰¹²³⁴⁵⁶⁷⁸⁹")
        return f'{self.symbol}{str(self.l1).translate(SUB)}{str(self.l2).translate(SUP)}' + f'({nice_repr(self.theta)}, {nice_repr(self.phi)})'


class QuditXXGate(QuditGate):
    """Two qudit rotation for two specified qudit levels: l1 and l2"""

    def __init__(self, l1, l2, theta, dimension=4):
        levels_connectivity_check(l1, l2)
        super().__init__(dimension=dimension, num_qubits=2)
        self.l1 = l1
        self.l2 = l2
        self.theta = theta

    def _unitary_(self):
        sigma_x = generalized_sigma(1, self.l1, self.l2, dimension=self.d)
        u = scipy.linalg.expm(-1j * self.theta / 2 * np.kron(sigma_x, sigma_x))

        return u

    def _is_parameterized_(self) -> bool:
        return cirq.protocols.is_parameterized(self.theta)

    def _resolve_parameters_(self, resolver: 'cirq.ParamResolver', recursive: bool):
        return self.__class__(self.l1, self.l2, resolver.value_of(self.theta, recursive), dimension=self.d)

    def _circuit_diagram_info_(self, args):
        self.symbol = 'XX'
        SUB = str.maketrans("0123456789", "₀₁₂₃₄₅₆₇₈₉")
        SUP = str.maketrans("0123456789", "⁰¹²³⁴⁵⁶⁷⁸⁹")
        info = f'{self.symbol}{str(self.l1).translate(SUB)}{str(self.l2).translate(SUP)}'.translate(
            SUB) + f'({nice_repr(self.theta)})'
        return info, info


class QuditZZGate(QuditGate):
    """Two qudit rotation for two specified qudit levels: l1 and l2"""

    def __init__(self, l1, l2, theta, dimension=4):
        levels_connectivity_check(l1, l2)
        super().__init__(dimension=dimension, num_qubits=2)
        self.l1 = l1
        self.l2 = l2
        self.theta = theta

    def _unitary_(self):
        sigma_z = generalized_sigma(3, self.l1, self.l2, dimension=self.d)
        u = scipy.linalg.expm(-1j * self.theta / 2 * np.kron(sigma_z, sigma_z))

        return u

    def _is_parameterized_(self) -> bool:
        return cirq.protocols.is_parameterized(self.theta)

    def _resolve_parameters_(self, resolver: 'cirq.ParamResolver', recursive: bool):
        return self.__class__(self.l1, self.l2, resolver.value_of(self.theta, recursive), dimension=self.d)

    def _circuit_diagram_info_(self, args):
        self.symbol = 'ZZ'
        SUB = str.maketrans("0123456789", "₀₁₂₃₄₅₆₇₈₉")
        SUP = str.maketrans("0123456789", "⁰¹²³⁴⁵⁶⁷⁸⁹")
        info = f'{self.symbol}{str(self.l1).translate(SUB)}{str(self.l2).translate(SUP)}'.translate(
            SUB) + f'({nice_repr(self.theta)})'
        return info, info


class QuditBarrier(QuditGate):
    """Just barrier for visual separation in circuit diagrams. Does nothing"""

    def __init__(self, dimension=4, num_qudits=2):
        super().__init__(dimension=dimension, num_qubits=num_qudits)
        self.symbol = '|'

    def _unitary_(self):
        return np.eye(self.d * self.d)


class QuditArbitraryUnitary(QuditGate):
    """Random unitary acts on qubits"""

    def __init__(self, dimension=4, num_qudits=2):
        super().__init__(dimension=dimension, num_qubits=num_qudits)
        self.unitary = np.array(scipy.stats.unitary_group.rvs(self.d ** self.n))
        self.symbol = 'U'

    def _unitary_(self):
        return self.unitary


'''
if __name__ == '__main__':
    n = 3  # number of qudits
    d = 4  # dimension of qudits

    qudits = cirq.LineQid.range(n, dimension=d)

    alpha = sympy.Symbol('alpha')
    beta = sympy.Symbol('beta')

    print('Qudit R Gate')
    circuit = cirq.Circuit(QuditRGate(0, 1, alpha, beta, dimension=d).on(qudits[0]))
    param_resolver = cirq.ParamResolver({'alpha': 0.2, 'beta': 0.3})
    resolved_circuit = cirq.resolve_parameters(circuit, param_resolver)
    print(resolved_circuit)
    print()

    print('Qudit XX Gate')
    circuit = cirq.Circuit(QuditXXGate(0, 2, beta, dimension=d).on(*qudits[:2]))
    param_resolver = cirq.ParamResolver({'alpha': 0.2, 'beta': 0.3})
    resolved_circuit = cirq.resolve_parameters(circuit, param_resolver)
    print(resolved_circuit)
    print()

    print('Qudit Barrier')
    circuit = cirq.Circuit(QuditBarrier(num_qudits=n, dimension=d).on(*qudits))
    print(circuit)
    print()

    print('Qudit Arbitrary Unitary Gate')
    circuit = cirq.Circuit(QuditArbitraryUnitary(num_qudits=n, dimension=d).on(*qudits))
    print(circuit)
'''
'''
#фазовый
class QutritDepolarizingChannel(QuditGate):

    def __init__(self,PP, p_matrix=None):
        super().__init__(dimension=3, num_qubits=1)

        # Calculation of the parameter p based on average experimental error of single qudit gate
        f1 = 0.9
        self.p1 = (1 - f1) / (1 - 1 / self.d ** 2)
        self.p1 = PP
        #print(self.d)
        #print((1 / self.d ** 2))

        # Choi matrix initialization


        if p_matrix is None:
            self.p_matrix = self.p1 / (self.d ** 2) * np.ones((self.d, self.d))
        else:
            self.p_matrix = p_matrix
        self.p_matrix[0, 0] += (1 - self.p1)  # identity probability
        self.p_matrix = np.array([[1/2, 0], [0, 1/2]])
        #print('prob[0,0]', self.p_matrix[0, 0])
        #print('prob_sum', self.p_matrix.sum())

        #print('prob_sum', self.p_matrix.sum())

    def _mixture_(self):
        ps = []
        for i in range(self.d):
            for j in range(self.d):
                pinv = np.linalg.inv(self.p_matrix)
                op = E(basis, i, j, self.p1, paulies1)
                #print(np.trace(op))
                ps.append(op)
        #print('total_sum', (np.trace(np.array(ps)) * self.p_matrix).sum())
        #chm = np.kron(np.ones(3), ps)
        X = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])
        Y = np.array([[0, complex(0, -1), 0], [complex(0, 1), 0, 0], [0, 0, 1]])
        Z = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])
        m1 = 3**0.5*np.array([[1,0,0],[0,(1 - self.p1)**0.5, 0], [0,0,(1 - self.p1)**0.5]])
        m2 = 3**0.5*np.array([[0,(self.p1)**0.5,0],[0,0, 0], [0,0,0]])
        m3 = 3**0.5*np.array([[0,0,0],[0,0,(self.p1)**0.5], [0,0,0]])
        m4 = 2**0.5 * (1-self.p1)**0.5 * np.eye(3)
        omega = np.exp(complex(0, 2 * np.pi / 3))
        m5 =2**0.5 *  (self.p1)**0.5*np.array([[1,0,0],[0,omega,0], [0,0,omega**2]])
        id = np.eye(3) - np.eye(3)
        shiz_massiv = [m4, id, id, m5]
        return tuple(zip(self.p_matrix.flatten(), shiz_massiv))

    def _circuit_diagram_info_(self, args):
        return f"Φ(p1={self.p1:.3f})"

'''


# деполяризующий
class QutritDepolarizingChannel(QuditGate):

    def __init__(self, PP, p_matrix=None):
        super().__init__(dimension=3, num_qubits=1)

        # Calculation of the parameter p based on average experimental error of single qudit gate
        f1 = 0.9
        self.p1 = (1 - f1) / (1 - 1 / self.d ** 2)
        self.p1 = PP
        # print(self.d)
        # print((1 / self.d ** 2))

        # Choi matrix initialization

        if p_matrix is None:
            self.p_matrix = (1 - self.p1) / (self.d ** 2) * np.ones((self.d, self.d))
            self.p_matrix = np.zeros_like(self.p_matrix)
            # self.p_matrix = np.ones((self.d, self.d))
        else:
            self.p_matrix = p_matrix
        # self.p_matrix[0, 0] += (1 - self.p1)  # identity probability
        for o in range(3):
            for oo in range(3):
                # self.p_matrix[o, oo] = 1 / np.trace(E(basis, o, oo, self.p1, paulies1))
                self.p_matrix[o, oo] = 1 / 9
        # self.p_matrix[0, 0] += 1

        if p_matrix is None:
            self.p_matrix = self.p1 / (self.d ** 2) * np.ones((self.d, self.d))
        else:
            self.p_matrix = p_matrix
        self.p_matrix[0, 0] += (1 - self.p1)  # identity probability
        self.p_matrix = np.array([[(1 - self.p1), self.p1 / 3], [self.p1 / 3, self.p1 / 3]])
        # print('prob[0,0]', self.p_matrix[0, 0])
        # print('prob_sum', self.p_matrix.sum())

        # print('prob_sum', self.p_matrix.sum())

    def _mixture_(self):
        ps = []
        for i in range(self.d):
            for j in range(self.d):
                pinv = np.linalg.inv(self.p_matrix)
                op = E(basis, i, j, self.p1, paulies1)
                # print(np.trace(op))
                ps.append(op)
        # print('total_sum', (np.trace(np.array(ps)) * self.p_matrix).sum())
        # chm = np.kron(np.ones(3), ps)
        X = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])
        Y = np.array([[0, complex(0, -1), 0], [complex(0, 1), 0, 0], [0, 0, 1]])
        Z = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])
        id = np.eye(3)
        shiz_massiv = [id, X, Y, Z]
        return tuple(zip(self.p_matrix.flatten(), shiz_massiv))

    def _circuit_diagram_info_(self, args):
        return f"Φ(p1={self.p1:.3f})"


'''
#АМПЛИТУДНЫЙ
class QutritDepolarizingChannel(QuditGate):

    def __init__(self,PP, p_matrix=None):
        super().__init__(dimension=3, num_qubits=1)

        # Calculation of the parameter p based on average experimental error of single qudit gate
        f1 = 0.9
        self.p1 = (1 - f1) / (1 - 1 / self.d ** 2)
        self.p1 = PP
        #print(self.d)
        #print((1 / self.d ** 2))

        # Choi matrix initialization


        if p_matrix is None:
            self.p_matrix = self.p1 / (self.d ** 2) * np.ones((self.d, self.d))
        else:
            self.p_matrix = p_matrix
        self.p_matrix[0, 0] += (1 - self.p1)  # identity probability
        self.p_matrix = np.array([[1/3, 1 / 3], [1 / 3, 0]])
        #print('prob[0,0]', self.p_matrix[0, 0])
        #print('prob_sum', self.p_matrix.sum())

        #print('prob_sum', self.p_matrix.sum())

    def _mixture_(self):
        ps = []
        for i in range(self.d):
            for j in range(self.d):
                pinv = np.linalg.inv(self.p_matrix)
                op = E(basis, i, j, self.p1, paulies1)
                #print(np.trace(op))
                ps.append(op)
        #print('total_sum', (np.trace(np.array(ps)) * self.p_matrix).sum())
        #chm = np.kron(np.ones(3), ps)
        X = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])
        Y = np.array([[0, complex(0, -1), 0], [complex(0, 1), 0, 0], [0, 0, 1]])
        Z = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])
        m1 = 3**0.5*np.array([[1,0,0],[0,(1 - self.p1)**0.5, 0], [0,0,(1 - self.p1)**0.5]])
        m2 = 3**0.5*np.array([[0,(self.p1)**0.5,0],[0,0, 0], [0,0,0]])
        m3 = 3**0.5*np.array([[0,0,0],[0,0,(self.p1)**0.5], [0,0,0]])
        id = np.eye(3) - np.eye(3)
        shiz_massiv = [m1, m2, m3, id]
        return tuple(zip(self.p_matrix.flatten(), shiz_massiv))

    def _circuit_diagram_info_(self, args):
        return f"Φ(p1={self.p1:.3f})"

    def _circuit_diagram_info_(self, args):
        return f"Φ(p1={self.p1:.3f})"
'''


class QutritAmplitudeChannel(QuditGate):

    def __init__(self, PP, p_matrix=None):
        super().__init__(dimension=3, num_qubits=1)

        # Calculation of the parameter p based on average experimental error of single qudit gate
        f1 = 0.9
        self.p1 = (1 - f1) / (1 - 1 / self.d ** 2)
        self.p1 = PP
        # print(self.d)
        # print((1 / self.d ** 2))

        # Choi matrix initialization
        '''
        if p_matrix is None:
            self.p_matrix = (1 - self.p1) / (self.d ** 2) * np.ones((self.d, self.d))
            self.p_matrix = np.zeros_like(self.p_matrix)
            #self.p_matrix = np.ones((self.d, self.d))
        else:
            self.p_matrix = p_matrix
        #self.p_matrix[0, 0] += (1 - self.p1)  # identity probability
        for o in range(3):
            for oo in range(3):
                #self.p_matrix[o, oo] = 1 / np.trace(E(basis, o, oo, self.p1, paulies1))
                self.p_matrix[o, oo] = 1 / 9
        #self.p_matrix[0, 0] += 1
        '''

        if p_matrix is None:
            self.p_matrix = self.p1 / (self.d ** 2) * np.ones((self.d, self.d))
        else:
            self.p_matrix = p_matrix
        self.p_matrix[0, 0] += (1 - self.p1)  # identity probability
        self.p_matrix = np.array([[(1 - self.p1), self.p1 / 3], [self.p1 / 3, self.p1 / 3]])
        # print('prob[0,0]', self.p_matrix[0, 0])
        # print('prob_sum', self.p_matrix.sum())

        # print('prob_sum', self.p_matrix.sum())

    def _mixture_(self):
        ps = []
        for i in range(self.d):
            for j in range(self.d):
                pinv = np.linalg.inv(self.p_matrix)
                op = E(basis, i, j, self.p1, paulies1)
                # print(np.trace(op))
                ps.append(op)
        # print('total_sum', (np.trace(np.array(ps)) * self.p_matrix).sum())
        # chm = np.kron(np.ones(3), ps)
        X = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])
        Y = np.array([[0, complex(0, -1), 0], [complex(0, 1), 0, 0], [0, 0, 1]])
        Z = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])
        Ea1 = np.array([[1, 0, 0], [0, (1 - self.p1) ** 0.5, 0], [0, 0, (1 - self.p1) ** 0.5]])
        Ea2 = np.array([[0, self.p1 ** 0.5, 0], [0, 0, 0], [0, 0, 0]])
        Ea3 = np.array([[0, 0, self.p1 ** 0.5], [0, 0, 0], [0, 0, 0]])
        id = np.eye(3)
        shiz_massiv = [Ea1, Ea2, Ea3]
        return tuple(zip(self.p_matrix.flatten(), shiz_massiv))

    def _circuit_diagram_info_(self, args):
        return f"Φ(p1={self.p1:.3f})"

def R(fi, hi, i=0, j=1):
    N = 3
    if i == j:
        return np.eye(N)
    if i > j:
        i, j = j, i
    x_for_ms = np.zeros((N, N))
    x_for_ms[i][j] = 1
    x_for_ms[j][i] = 1
    y_for_ms = np.zeros((N, N))
    y_for_ms[i][j] = -1
    y_for_ms[j][i] = 1
    y_for_ms = y_for_ms * 1j

    m = np.cos(fi) * x_for_ms + np.sin(fi) * y_for_ms

    return linalg.expm(-1j * m * hi / 2)



'''
def R(fi, hi, i=0, j=1):
    I = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    x01_for_ms = np.array([[0, 1, 0],
                           [1, 0, 0],
                           [0, 0, 0]])
    y01_for_ms = np.array([[0, complex(0, -1), 0],
                           [complex(0, 1), 0, 0],
                           [0, 0, 0]])
    x12_for_ms = np.array([[0, 0, 0],
                           [0, 0, 1],
                           [0, 1, 0]])
    y12_for_ms = np.array([[0, 0, 0],
                           [0, 0, complex(0, -1)],
                           [0, complex(0, 1), 0]])
    x02_for_ms = np.array([[0, 0, 1],
                           [0, 0, 0],
                           [1, 0, 0]])
    y02_for_ms = np.array([[0, 0, complex(0, -1)],
                           [0, 0, 0],
                           [complex(0, 1), 0, 0]])
    if (i, j) == (0, 1):
        x_for_ms = x01_for_ms
        y_for_ms = y01_for_ms
    elif (i, j) == (1, 2):
        x_for_ms = x12_for_ms
        y_for_ms = y12_for_ms
    else:
        x_for_ms = x02_for_ms
        y_for_ms = y02_for_ms
    m = np.cos(fi) * x_for_ms + np.sin(fi) * y_for_ms

    return linalg.expm(complex(0, -1) * m * hi / 2)
'''

def make_ms_matrix(N, fi, hi, i, j, k, l):
    if i == j:
        return np.eye(N)
    if i > j:
        i, j = j, i
    x_for_ms1 = np.zeros((N, N))
    x_for_ms1[i][j] = 1
    x_for_ms1[j][i] = 1
    y_for_ms1 = np.zeros((N, N))
    y_for_ms1[i][j] = -1
    y_for_ms1[j][i] = 1
    y_for_ms1 = 1j * y_for_ms1
    if k == l:
        return
    if k > l:
        k, l = l, k
    x_for_ms2 = np.zeros((N, N))
    x_for_ms2[k][l] = 1
    x_for_ms2[l][k] = 1
    y_for_ms2 = np.zeros((N, N))
    y_for_ms2[k][l] = -1
    y_for_ms2[l][k] = 1
    y_for_ms1 = 1j * y_for_ms1

    m = np.kron((np.cos(fi) * x_for_ms1 + np.sin(fi) * y_for_ms1), (np.cos(fi) * x_for_ms2 + np.sin(fi) * y_for_ms2))
    m = -1j * m * hi
    return linalg.expm(m)



class TwoQuditMSGate3_c(gate_features.TwoQubitGate
                        ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(0, -np.pi / 2)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101_c',
                          'XX0101_c'))


class TwoQuditMSGate02(gate_features.TwoQubitGate
                      ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(3, 0, np.pi / 2,0,1,0,2)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))

class TwoQuditMSGate01(gate_features.TwoQubitGate
                      ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(3, 0, np.pi / 2,0,1,0,1)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))

class unit3(gate_features.ThreeQubitGate
                      ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3, 3)

    def _unitary_(self):
        matrix = unit
        return matrix

    def num_controls(self):
        return 3

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))


class TwoQuditMSGate12(gate_features.TwoQubitGate
                      ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(3, 0, np.pi / 2, 0,1,1,2)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))

class TwoQuditMSGate01_c(gate_features.TwoQubitGate
                      ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(3, 0, -np.pi / 2,0,1,0,1)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))

class U_press(gate_features.TwoQubitGate
              ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(0, np.pi / 2)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))


class U(cirq.Gate):
    def __init__(self, mat, diag_i='R'):
        self.mat = mat
        self.diag_info = diag_i

    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return self.mat

    def _circuit_diagram_info_(self, args):
        return self.diag_info




def U1_clear(cirquit, q1, q2):
    u1 = U(R(0, -np.pi, 1, 2), 'Rx(-π)12')
    u2 = U(R(np.pi / 2, np.pi / 2, 0, 1), 'Ry(π/2)01')
    u6 = U(R(np.pi / 2, -np.pi, 0, 2), 'Ry(-π)02')
    cirquit.append([u1(q1), u6(q2)], strategy=InsertStrategy.INLINE)
    # adde(cirquit, [u1, u6], [q1, q2], 1)
    cirquit.append([u2(q1)], strategy=InsertStrategy.INLINE)
    # adde(cirquit, [u2], [q1], 1)
    xx = TwoQuditMSGate01()
    cirquit.append([xx(q1, q2)], strategy=InsertStrategy.INLINE)
    # error(cirquit, [q1, q2], PMS)
    # adde(cirquit, [xx], [q1, q2], 2)




def U1_c_clear(cirquit, q1, q2):
    u1 = U(R(0, np.pi, 1, 2), 'Rx(π)12')
    u2 = U(R(np.pi / 2, -np.pi / 2, 0, 1), 'Ry(-π/2)01')
    u6 = U(R(np.pi / 2, np.pi, 0, 2), 'Ry(π)02')
    xx_c = TwoQuditMSGate01_c()
    cirquit.append([xx_c(q1, q2)], strategy=InsertStrategy.INLINE)
    # adde(cirquit, [xx_c], [q1, q2], 2)
    # error(cirquit, [q1, q2], PMS)
    # adde(cirquit, [u2], [q1], 1)
    cirquit.append([u2(q1)], strategy=InsertStrategy.INLINE)
    # adde(cirquit, [u1, u6], [q1, q2], 1)
    cirquit.append([u1(q1), u6(q2)], strategy=InsertStrategy.INLINE)


def CX_clear01(cirquit, q1, q2):
    u1 = U(R(0, -np.pi, 1, 2), 'Rx(-π)12')
    u2 = U(R(np.pi / 2, np.pi / 2, 0, 1), 'Ry(π/2)01')
    u3 = U(R(0, -np.pi, 0, 1), 'Rx(-π)01')
    u4 = U(R(np.pi / 2, -np.pi / 2, 0, 1), 'Ry(-π/2)01')
    u5 = U(R(0, np.pi, 1, 2), 'Rx(π)12')
    # adde(cirquit, [u1], [q1], 1)
    # adde(cirquit, [u2], [q1], 1)
    cirquit.append([u1(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u2(q1)], strategy=InsertStrategy.INLINE)
    xx = TwoQuditMSGate01()
    # adde(cirquit, [xx], [q1, q2], 2)
    cirquit.append([xx(q1, q2)], strategy=InsertStrategy.INLINE)
    # error(cirquit, [q1, q2], 2)
    # adde(cirquit, [u3, u3], [q1, q2], 1)
    # adde(cirquit, [u4], [q1], 1)
    # adde(cirquit, [u5], [q1], 1)
    cirquit.append([u3(q1), u3(q2)], strategy=InsertStrategy.INLINE)
    cirquit.append([u4(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u5(q1)], strategy=InsertStrategy.INLINE)

def CX_clear02(cirquit, q1, q2):
    u1 = U(R(0, -np.pi, 1, 2), 'Rx(-π)12')
    u2 = U(R(np.pi / 2, np.pi / 2, 0, 1), 'Ry(π/2)01')
    u3 = U(R(0, -np.pi, 0, 1), 'Rx(-π)01')
    u35 = U(R(0, -np.pi, 0, 2), 'Rx(-π)01')
    u4 = U(R(np.pi / 2, -np.pi / 2, 0, 1), 'Ry(-π/2)01')
    u5 = U(R(0, np.pi, 1, 2), 'Rx(π)12')
    # adde(cirquit, [u1], [q1], 1)
    # adde(cirquit, [u2], [q1], 1)
    cirquit.append([u1(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u2(q1)], strategy=InsertStrategy.INLINE)
    xx = TwoQuditMSGate02()
    # adde(cirquit, [xx], [q1, q2], 2)
    cirquit.append([xx(q1, q2)], strategy=InsertStrategy.INLINE)
    # error(cirquit, [q1, q2], 2)
    # adde(cirquit, [u3, u3], [q1, q2], 1)
    # adde(cirquit, [u4], [q1], 1)
    # adde(cirquit, [u5], [q1], 1)
    cirquit.append([u3(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u35(q2)], strategy=InsertStrategy.INLINE)
    cirquit.append([u4(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u5(q1)], strategy=InsertStrategy.INLINE)


def CX_clear12(cirquit, q1, q2):
    u1 = U(R(0, -np.pi, 1, 2), 'Rx(-π)12')
    u2 = U(R(np.pi / 2, np.pi / 2, 0, 1), 'Ry(π/2)01')
    u3 = U(R(0, -np.pi, 0, 1), 'Rx(-π)01')
    u35 = U(R(0, -np.pi, 1, 2), 'Rx(-π)01')
    u4 = U(R(np.pi / 2, -np.pi / 2, 0, 1), 'Ry(-π/2)01')
    u5 = U(R(0, np.pi, 1, 2), 'Rx(π)12')
    # adde(cirquit, [u1], [q1], 1)
    # adde(cirquit, [u2], [q1], 1)
    cirquit.append([u1(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u2(q1)], strategy=InsertStrategy.INLINE)
    xx = TwoQuditMSGate12()
    # adde(cirquit, [xx], [q1, q2], 2)
    cirquit.append([xx(q1, q2)], strategy=InsertStrategy.INLINE)
    # error(cirquit, [q1, q2], 2)
    # adde(cirquit, [u3, u3], [q1, q2], 1)
    # adde(cirquit, [u4], [q1], 1)
    # adde(cirquit, [u5], [q1], 1)
    cirquit.append([u3(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u35(q2)], strategy=InsertStrategy.INLINE)
    cirquit.append([u4(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u5(q1)], strategy=InsertStrategy.INLINE)






def CCX01(cirquit, q1, q2, q3):
    U1_clear(cirquit, q1, q2)
    CX_clear01(cirquit, q2, q3)
    U1_c_clear(cirquit, q1, q2)

def CCX02(cirquit, q1, q2, q3):
    U1_clear(cirquit, q1, q2)
    CX_clear02(cirquit, q2, q3)
    U1_c_clear(cirquit, q1, q2)

def CCX12(cirquit, q1, q2, q3):
    U1_clear(cirquit, q1, q2)
    CX_clear12(cirquit, q2, q3)
    U1_c_clear(cirquit, q1, q2)






class H(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 0, 1) @ R(np.pi / 2, np.pi / 2, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'U_enc'


class X1_conj(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return np.array([[0, complex(0, -1), 0], [complex(0, -1), 0, 0], [0, 0, 1]])

    def _circuit_diagram_info_(self, args):
        return 'X1_c'


class X2_conj(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return np.conj(np.array([[0, 0, complex(0, -1)],
                                 [0, 1, 0],
                                 [complex(0, -1), 0, 0]]))

    def _circuit_diagram_info_(self, args):
        return 'X2_c'


class Z1(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 0, 1) @ R(np.pi / 2, np.pi, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'Z1'


class Y1(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(np.pi / 2, np.pi, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'Y1'


class X12(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 1, 2)

    def _circuit_diagram_info_(self, args):
        return 'X2'


class X1(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'X1'



def run_single_qudit(t, N):
    fidelity = 0
    sch = 0
    for alf1 in np.linspace(0, np.pi, N // 2):
        for alf2 in np.linspace(0, 2 * np.pi, N):
            alf2 += 2 * np.pi / N / 2
            # alf1 = random.randint(0, 1000) / 1000 * 2 * np.pi
            # alf2 = random.randint(0, 1000) / 1000 * 2 * np.pi
            sch += 1
            circuit1 = cirq.Circuit()
            qutrits1 = []
            qutrits1.append(cirq.LineQid(0, dimension=3))

            povorot = R(alf1, alf2, 0, 1)
            # !

            pg = U(povorot)
            # circuit1.append([h(qutrits1[0])], strategy=InsertStrategy.INLINE)
            circuit1.append([pg(qutrits1[0])], strategy=InsertStrategy.INLINE)
            # print(cirq.final_density_matrix(circuit1, qubit_order=qutrits1))
            # print()



            povorot_r = R(alf1, -alf2, 0, 1)
            pg_r = U(povorot_r)
            circuit1.append([pg_r(qutrits1[0])], strategy=InsertStrategy.INLINE)
            # circuit1.append([h(qutrits1[0])], strategy=InsertStrategy.INLINE)

            ro_ab = cirq.final_density_matrix(circuit1)

            # print(mat_0)
            fidelity += abs(ro_ab[0][0])
    return fidelity / sch

zZ = np.array([[1,0,0]]).T
eE = np.array([[0,1,0]]).T
fF = np.array([[0,0,1]]).T
A = [zZ, eE, fF]

B = []

def m(a ,b, c, d, e):
    return np.kron(np.kron(np.kron(np.kron(a, b), c), d), e)

for i1 in range(3):
    for i2 in range(3):
        B.append(np.kron(A[i1], A[i2]))

def partial_trace(rho_ab):
    tr = np.eye(3) - np.eye(3)
    for i in range(3):
        for j in range(3):
            for k in range(9):
                tr = tr + np.kron(A[i].T, B[k].T) @ rho_ab @ np.kron(A[j], B[k]) * A[i] @ A[j].T
    return tr


sim = cirq.Simulator()

circuit1 = cirq.Circuit()
qutrits1 = []
qutrits1.append(cirq.LineQid(0, dimension=3))
qutrits1.append(cirq.LineQid(1, dimension=3))
qutrits1.append(cirq.LineQid(2, dimension=3))
#qutrits1.append(cirq.LineQid(3, dimension=3))
q1, q2, q3= qutrits1[0], qutrits1[1], qutrits1[2]

#q4 = qutrits1[3]
x01 = X1()
x12 = X12()
h = H()


#CX_clear01(circuit1,q1,q2)
UNITARY = unit3()
#circuit1.append([UNITARY(q1,q2,q3)], strategy=InsertStrategy.INLINE)


alf11 = random.randint(0, 1000) / 1000 * 2 * np.pi
alf21 = random.randint(0, 1000) / 1000 * 2 * np.pi
#alf11 = 0
#alf21 = 0
povorot = R(alf11, alf21, 0, 1)
pg = U(povorot)
circuit1.append([pg(qutrits1[0])], strategy=InsertStrategy.INLINE)
alf12 = random.randint(0, 1000) / 1000 * 2 * np.pi
alf22 = random.randint(0, 1000) / 1000 * 2 * np.pi
#alf21 = 0
#alf22 = 0
povorot = R(alf12, alf22, 0, 1)
pg = U(povorot)
circuit1.append([pg(qutrits1[1])], strategy=InsertStrategy.INLINE)
alf13 = random.randint(0, 1000) / 1000 * 2 * np.pi
alf23 = random.randint(0, 1000) / 1000 * 2 * np.pi
#alf13 = 0
#alf23 = 0
povorot = R(alf13, alf23, 0, 1)
pg = U(povorot)
circuit1.append([pg(qutrits1[2])], strategy=InsertStrategy.INLINE)

circuit1.append([UNITARY(q1,q2,q3)], strategy=InsertStrategy.INLINE)
res1 = sim.simulate(circuit1)
#ro_ab = cirq.final_density_matrix(circuit1, qubit_order=qutrits1)
print(res1)
#print(abs(ro_ab))

'''
x01 = X1()
x12 = X12()
#circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
#2-19
circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)
circuit1.append([x01(q2)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)
circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX12(circuit1,q3,q2,q1)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)
circuit1.append([x01(q2)], strategy=InsertStrategy.INLINE)
circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)

res1 = sim.simulate(circuit1)
print(res1)


#5-7
circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX12(circuit1,q1,q3,q2)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)
circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)

#11-13
CCX02(circuit1,q3,q1,q2)
circuit1.append([x12(q2)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)
circuit1.append([x12(q2)], strategy=InsertStrategy.INLINE)
CCX02(circuit1,q3,q1,q2)

#14-22
CCX12(circuit1,q2,q3,q1)
circuit1.append([x12(q1)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)
circuit1.append([x12(q1)], strategy=InsertStrategy.INLINE)
CCX12(circuit1,q2,q3,q1)


#res1 = sim.simulate(circuit1)
#print(res1)
#print(circuit1)
#print(abs(cirq.final_density_matrix(circuit1, qubit_order=qutrits1)))
#print(res1.measurements[str(qutrits1[2])][0])
#print(abs(partial_trace(cirq.final_density_matrix(circuit1, qubit_order=[q3,q2,q1]))))

'''
'''
q3, q4 = q4, q3

CCX01(circuit1,q1,q2,q3)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX12(circuit1,q3,q1,q2)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)

circuit1.append([x01(q2)], strategy=InsertStrategy.INLINE)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX12(circuit1,q3,q2,q1)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX01(circuit1,q1,q2,q3)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)
CCX12(circuit1,q3,q2,q1)
circuit1.append([x01(q2)], strategy=InsertStrategy.INLINE)
circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)

CCX02(circuit1,q3,q2,q1)
circuit1.append([x12(q1)], strategy=InsertStrategy.INLINE)
CCX12(circuit1,q1,q3,q2)
circuit1.append([x12(q1)], strategy=InsertStrategy.INLINE)
CCX02(circuit1,q3,q2,q1)

circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)
CCX02(circuit1,q1,q3,q2)
circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)

povorot = R(alf13, -alf23, 0, 1)
pg = U(povorot)
circuit1.append([pg(qutrits1[2])], strategy=InsertStrategy.INLINE)

povorot = R(alf12, -alf22, 0, 1)
pg = U(povorot)
circuit1.append([pg(qutrits1[1])], strategy=InsertStrategy.INLINE)

povorot = R(alf11, -alf21, 0, 1)
pg = U(povorot)
circuit1.append([pg(qutrits1[0])], strategy=InsertStrategy.INLINE)

q3, q4 = q4, q3
circuit1.append([cirq.measure(qutrits1[0])])
circuit1.append([cirq.measure(qutrits1[1])])
circuit1.append([cirq.measure(qutrits1[2])])
circuit1.append([cirq.measure(qutrits1[3])])
res1 = sim.simulate(circuit1)
#print(circuit1)
#print(abs(cirq.final_density_matrix(circuit1, qubit_order=qutrits1)))
print(res1.measurements[str(qutrits1[0])][0])
print(res1.measurements[str(qutrits1[1])][0])
print(res1.measurements[str(qutrits1[2])][0])
print(res1.measurements[str(qutrits1[3])][0])
#print(res1)
'''