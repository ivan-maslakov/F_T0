import numpy as np
import cirq
import networkx as nx
def printm(m):
    print('np.array([', end='')
    for line in m:
        print('[', end='')
        for i in range(len(line)-1):
            print(line[i],',', end='')
        print(line[i], end='')
        print('],')
    print('])')

def get_minor(m, i, j):
    X = np.ones(len(m)).astype(bool)
    Y = np.ones(len(m[0])).astype(bool)
    X[i], Y[j] = False, False
    return m[np.ix_(X, Y)]
import numpy as np
import matplotlib.pyplot as plt
from cirq.circuits import InsertStrategy
import scipy
from scipy import linalg
from cirq import protocols
from cirq.testing import gate_features
import random

def m3(g1,g2,g3):
    return(np.kron(g1,np.kron(g2,g3)))

def m2(g1, g2):
    return(np.kron(g1,g2))

def dag(matrix):
    return np.conj(matrix.T)

m1 = np.eye(10)
m2 = np.eye(10)
m1[1][1], m1[1][8] =  m1[1][8], m1[1][1]
m1[8][8], m1[8][1] =  m1[8][1], m1[8][8]
m2[2][2], m2[2][7] =  m2[2][7], m2[2][2]
m2[7][7], m2[7][2] =  m2[7][2], m2[7][7]
#print(m1@m2)



def R(fi, hi, i=0, j=1):
    N = 3
    if i == j:
        return np.eye(N)
    if i > j:
        i, j = j, i
    x_for_ms = np.zeros((N, N))
    x_for_ms[i][j] = 1
    x_for_ms[j][i] = 1
    y_for_ms = np.zeros((N, N))
    y_for_ms[i][j] = -1
    y_for_ms[j][i] = 1
    y_for_ms = y_for_ms * 1j

    m = np.cos(fi) * x_for_ms + np.sin(fi) * y_for_ms

    return linalg.expm(-1j * m * hi / 2)



def make_ms_matrix(N, fi, hi, i, j, k, l):
    if i == j:
        return np.eye(N)
    if i > j:
        i, j = j, i
    x_for_ms1 = np.zeros((N, N))
    x_for_ms1[i][j] = 1
    x_for_ms1[j][i] = 1
    y_for_ms1 = np.zeros((N, N))
    y_for_ms1[i][j] = -1
    y_for_ms1[j][i] = 1
    y_for_ms1 = 1j * y_for_ms1
    if k == l:
        return
    if k > l:
        k, l = l, k
    x_for_ms2 = np.zeros((N, N))
    x_for_ms2[k][l] = 1
    x_for_ms2[l][k] = 1
    y_for_ms2 = np.zeros((N, N))
    y_for_ms2[k][l] = -1
    y_for_ms2[l][k] = 1
    y_for_ms1 = 1j * y_for_ms1

    m = np.kron((np.cos(fi) * x_for_ms1 + np.sin(fi) * y_for_ms1), (np.cos(fi) * x_for_ms2 + np.sin(fi) * y_for_ms2))
    m = -1j * m * hi
    return linalg.expm(m)
I = np.eye(3)

u1 = np.kron(R(0, -np.pi, 1, 2), I)
u2 = np.kron(R(np.pi / 2, np.pi / 2, 0, 1), I)
u3 = np.kron(R(0, -np.pi, 0, 1), R(0, -np.pi, 0, 1))





u4 = np.kron(R(np.pi / 2, -np.pi / 2, 0, 1), I)
u5 = np.kron(R(0, np.pi, 1, 2), I)
u1r = np.kron(I,R(0, -np.pi, 1, 2))
u2r = np.kron(I,R(np.pi / 2, np.pi / 2, 0, 1))
u3r = np.kron(R(0, -np.pi, 0, 1), R(0, -np.pi, 0, 1))





u4r = np.kron(I,R(np.pi / 2, -np.pi / 2, 0, 1))
u5r = np.kron(I,R(0, np.pi, 1, 2))
xx01 = make_ms_matrix(3, 0, np.pi / 2,0,1,0,1)
xx01r = make_ms_matrix(3, 0, np.pi / 2,0,1,0,1)
cx = u1 @ u2 @ xx01 @ u3 @ u4 @ u5
cx01r = u1r @ u2r @ xx01r @ u3r @ u4r @ u5r
def comp_m(m):
    real = (m + np.conj(m)) / 2
    im = (m - np.conj(m)) / 2 * -1j
    for i in range(len(real)):
        for j in range(len(real)):
            real[i][j] = np.round(real[i][j],2)
    for i in range(len(im)):
        for j in range(len(im)):
            im[i][j] = np.round(im[i][j],2)
    return real + 1j * im
mat = np.eye(9)
mat[3][3], mat[3][4] = mat[3][4], mat[3][3]
mat[4][4], mat[4][3] = mat[4][3], mat[4][4]
#print(comp_m(-1j * (cx01)))
#dd01 = np.kron(R(0, np.pi,0,1), R(0, np.pi,0,1))
h = np.kron(I,R(0, np.pi, 0, 1) @ R(np.pi / 2, np.pi / 2, 0, 1))
#u1 = np.kron(R(np.pi / 2, -np.pi, 1, 2), I)
#u2 = np.kron(R(0, np.pi / 2, 0, 1), I)
#u3 = np.kron(R(np.pi / 2, -np.pi, 0, 1), R(0, -np.pi, 0, 1))
#u4 = np.kron(R(0, -np.pi / 2, 0, 1), I)
#u5 = np.kron(R(np.pi / 2, np.pi, 1, 2), I)
h = R(0, np.pi, 0, 1) @ R(np.pi / 2, np.pi / 2, 0, 1)
#dd01 = make_ms_matrix(3, 0, np.pi / 2,0,1,0,1)
#dx01 = h @ cx01
#print()
#print(comp_m(cx01 @ cx01r @ cx01))
#print()
T = h @ R(np.pi/2, np.pi/8, 0,1) @ h
#print(comp_m(T))
#print(np.linalg.det(make_ms_matrix(3, 0, np.pi / 2,0,1,0,2)))

T = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 1, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, -1, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 1, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 1, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, -1j, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 1, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 1, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 1]]
) * -1j

T = T / np.linalg.det(T)
L = 1
BASIS = np.array([[[1,0,0]],[[0,1,0]]])
ro = np.zeros((27,27))
for vec1 in BASIS:
    for vec2 in BASIS:
        for vec3 in BASIS:
            ro += 1 / 8 **0.5 * m3(vec1.T,vec2.T,vec3.T)@ m3(vec1,vec2,vec3)


#print(ro)
def func(x):



    rs = np.eye(27)
    for i in range(0, 4 * L, 4):
        l1 = 10
        r1 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r2 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms1 = np.kron(make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 0, 2, 0, 1), I)
        R1 = m3(R(x[l1 * i + 6], x[l1 * i + 7], 0, 1), I, I)
        R2 = m3(R(x[l1 * i + 8], x[l1 * i + 9], 0, 1), I, I)
        i += 1
        r3 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r4 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms2 = np.kron(make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 1, 2, 0, 1), I)
        R3 = m3(R(x[l1 * i + 6], x[l1 * i + 7], 0, 1), I, I)
        R4 = m3(R(x[l1 * i + 8], x[l1 * i + 9], 0, 1), I, I)
        i += 1
        r5 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r6 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms3 = np.kron(I, make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 0, 2, 0, 1))
        R5 = m3(I, I, R(x[l1 * i + 6], x[l1 * i + 7], 0, 1))
        R6 = m3(I, I, R(x[l1 * i + 8], x[l1 * i + 9], 0, 1))
        i += 1
        r7 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r8 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms4 = np.kron(I, make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 1, 2, 0, 1))
        R7 = m3(I, I, R(x[l1 * i + 6], x[l1 * i + 7], 0, 1))
        R8 = m3(I, I, R(x[l1 * i + 8], x[l1 * i + 9], 0, 1))

        rs = rs @ r1 @ r2 @ ms1 @ R1 @ R2 @ r3 @ r4 @ ms2 @ R3 @ R4 @ r5 @ r6 @ ms3 @ R5 @ R6 @ r7 @ r8 @ ms4 @ R7 @ R8
    matrix = rs @ ro @ dag(rs)
    total = abs(matrix).sum()
    minor = abs(matrix[np.array([0,1,2,9,10,11,18,19,20])[:,np.newaxis],np.array([0,1,2,9,10,11,18,19,20])]).sum()
    return(total - minor)

def sh_func(x):
    rs = np.eye(27)
    for i in range(0, 4 * L, 4):
        l1 = 10
        r1 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r2 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms1 = np.kron(make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 0, 2, 0, 1), I)
        R1 = m3(R(x[l1 * i + 6], x[l1 * i + 7], 0, 1), I, I)
        R2 = m3(R(x[l1 * i + 8], x[l1 * i + 9], 0, 1), I, I)
        i += 1
        r3 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r4 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms2 = np.kron(make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 1, 2, 0, 1), I)
        R3 = m3(R(x[l1 * i + 6], x[l1 * i + 7], 0, 1), I, I)
        R4 = m3(R(x[l1 * i + 8], x[l1 * i + 9], 0, 1), I, I)
        i += 1
        r5 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r6 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms3 = np.kron(I, make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 0, 2, 0, 1))
        R5 = m3(I, I,R(x[l1 * i + 6], x[l1 * i + 7], 0, 1))
        R6 = m3(I, I,R(x[l1 * i + 8], x[l1 * i + 9], 0, 1))
        i += 1
        r7 = m3(I, R(x[l1 * i + 0], x[l1 * i + 1], 0, 1), I)
        r8 = m3(I, R(x[l1 * i + 2], x[l1 * i + 3], 0, 1), I)
        ms4 = np.kron(I, make_ms_matrix(3, x[l1 * i + 4], x[l1 * i + 5], 1, 2, 0, 1))
        R7 = m3(I, I,R(x[l1 * i + 6], x[l1 * i + 7], 0, 1))
        R8 = m3(I, I,R(x[l1 * i + 8], x[l1 * i + 9], 0, 1))

        rs = rs @ r1 @ r2 @ ms1 @ R1 @ R2 @ r3 @ r4 @ ms2 @ R3 @ R4 @ r5 @ r6 @ ms3 @ R5 @ R6 @ r7 @ r8 @ ms4 @ R7 @ R8

    return rs
bnds = []
for i in range(L*40):
    bnds.append((-np.pi, np.pi))
bnds = np.array(bnds)
guess = []
for i in range(L * 40):
    guess.append(random.randint(-1000, 1000) / 1000 * np.pi)
    #guess.append(2)
guess = np.array(guess)
res1 = scipy.optimize.minimize(func, guess, bounds=bnds)
print(res1)
#print('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
print(list(res1.x))

printm(sh_func(res1.x))



#print(func(x))
#CCX_n = m3(I,I,h) @ m2(I, cx) @
mask = np.eye(9)
mask[2][2] = -1
mask = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 1, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, -1, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 1, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 1, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, -1j, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 1, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 1, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 1]])
mask = mask / np.linalg.det(mask)
#print(comp_m(cx / np.linalg.det(cx)))
#print()
#print(list(sh_func(x)))

z = np.array([[1,0,0]]).T
e = z = np.array([[0,1,0]]).T



ro = m3(np.array([[1, 1, 0]]), np.array([[1, 1, 0]]), np.array([[1, 1, 0]])).T @ m3(np.array([[1, 1, 0]]),
                                                          np.array([[1, 1, 0]]),
                                                                                    np.array([[1, 1, 0]]))

v = m3(z,z,z)
#print(ro)
#print(abs(ro[np.array([0,1,2,3,4,5,6,7,8])[:,np.newaxis],np.array([0,1,2,3,4,5,6,7,8])]))
def comp_m(m, par):
    real = (m + np.conj(m)) / 2
    im = (m - np.conj(m)) / 2 * -1j
    for i in range(len(real)):
        for j in range(len(real)):
            real[i][j] = np.round(real[i][j], par)
    for i in range(len(im)):
        for j in range(len(im)):
            im[i][j] = np.round(im[i][j], par)
    return real + 1j * im
vyv = sh_func([-3.1415853958109343, 2.356857127377434, 3.141592653589793, 2.355472094482524, 1.4386665836336743, -3.141592653589793, 3.101127147762427, 3.141592653589793, 3.101323470216365, -3.141592653589793, -3.0902000541308783, -3.141592653589793, -3.1371567104372033, -3.098216254659037, -3.1356557440632917, 3.1363777571622395, 3.140802133716783, 0.02405265668507144, -3.1361079014900053, -3.1331776604441264, 3.1389554752034714, -3.125126391048745, -3.136616199606024, -3.133134966982372, -3.1415150462248262, -3.1378861198625465, 3.1415923274068183, 3.1415664786850614, 3.141590459247292, 3.141592653589793, -3.1325059440123786, 3.141592653589793, 3.1415628132311393, 3.141592653589793, -2.8942877326274425, -3.141592653589793, -3.1389231823904162, -3.1361271123760517, 3.141555980119938, -3.136029675023903, -3.141592653589793, 3.141592653589793, -3.141592653589793, 3.141592235618393, 3.141592653589793, -3.141592653589793, 3.141592653581136, -3.14159265353013, -3.141592653589793, -3.141592653589793, 3.141164665358188, -3.141592653589793, 3.141592653589793, -3.141592653589793, 3.141592653575317, -3.141592224217854, 3.141592653589793, -3.141592653589793, 3.1415699839254976, 3.141592653589793, 2.1048670779051615, 0.3204424506661589, 3.141592653589793, 2.9153979825313283, 2.8023006470020957, 3.141592653589793, 3.141592653589793, 0.33300882128051806, 3.141592653589793, 2.978229835603124, 1.288052987971815, 1.3446016557364315, 2.0231856689118266, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 1.288052987971815, 3.141592653589793, 1.6901768476313088, 3.141592653589793, 1.834690109696439, 2.626371458401067, 3.141592653589793, 1.7215927741672068, 2.12999981913388, 2.0169024836046474, 2.9845130209103035, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.6723008278682158, 1.2189379495928399, 2.934247538452867, 2.004336112990288, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.6220353454107791, 0.37070793312359557, 3.141592653589793, 1.3446016557364315, 3.141592653589793, 3.141592653589793, 2.349911304885165, 3.141592653589793, 3.141592653589793, 2.594955531865169, 0.6911503837897545, 2.4504422698000385, 1.8598228509251575, 3.141592653589793, 1.7027432182456679, 0.5340707511102649, 3.141592653589793, 1.866106036232337, 2.205398042820035, 3.141592653589793, 3.141592653589793, 2.142566189748239, 3.141592653589793, 3.141592653589793, 0.10681415022205297, 3.141592653589793, 3.141592653589793, 3.141592653589793, 1.2566370614359172, 0.5089380098815465, 3.141592653589793, 3.141592653589793, 1.3257520998148926, 2.5509732347149123, 2.6829201261656834, 3.141592653589793, 3.015928947446201, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.4084070449666731, 3.141592653589793, 1.790707812546182, 0.5215043804959056, 3.141592653589793, 3.141592653589793, 0.24504422698000386, 3.141592653589793, 0.8293804605477054, 3.141592653589793, 1.9163715186897738, 1.9226547039969533, 0.4461061568097506, 2.7269024233159405, 3.066194429903638, 0.9738937226128359, 2.048318410140545, 1.6713272917097701, 3.141592653589793, 0.8042477193189871, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.6848671984825749, 0.21991148575128555, 3.141592653589793, 3.141592653589793, 0.6785840131753953, 1.6776104770169495, 0.6660176425610361, 2.494424566950296, 0.05026548245743669, 3.141592653589793, 3.141592653589793, 2.8023006470020957, 1.9163715186897738, 3.141592653589793, 2.1048670779051615, 2.519557308179014, 0.10681415022205297, 3.141592653589793, 1.4325662500369458, 0.40212385965949354, 2.8651325000738916, 3.141592653589793, 2.4315927138785, 3.141592653589793, 3.141592653589793, 3.141592653589793, 1.9917697423759289, 3.141592653589793, 3.141592653589793, 0.3267256359733385, 2.0169024836046474, 3.141592653589793, 1.1309733552923256, 3.141592653589793, 3.141592653589793, 1.0367255756846319, 2.1614157456697773, 3.141592653589793, 2.6640705702441445, 2.839999758845173, 3.141592653589793, 3.141592653589793, 0.27646015351590175, 1.8158405537749003, 2.5572564200220915, 3.141592653589793, 2.8337165735379934, 2.1614157456697773, 3.141592653589793, 0.6911503837897545, 0.1445132620651305, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.0724776152108175, 2.8902652413026098, 1.6210618092523332, 2.035752039526186, 2.720619238008761, 3.141592653589793, 2.9970793915246623, 1.897521962768235, 0.16964600329384882, 1.2126547642856602, 3.141592653589793, 2.7520351645446586, 0.4649557127312894, 1.7341591447815659, 3.141592653589793, 2.9468139090672256, 0.8482300164692442, 3.141592653589793])

#printm(vyv)