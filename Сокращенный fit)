import cirq
import numpy as np
import matplotlib.pyplot as plt
from cirq.circuits import InsertStrategy
import scipy
from scipy import linalg
from cirq import protocols
from cirq.testing import gate_features
import random


# Функции нативных гейтов
def R(fi, hi, i=0, j=1):
    N = 3
    if i == j:
        return np.eye(N)
    if i > j:
        i, j = j, i
    x_for_ms = np.zeros((N, N))
    x_for_ms[i][j] = 1
    x_for_ms[j][i] = 1
    y_for_ms = np.zeros((N, N))
    y_for_ms[i][j] = -1
    y_for_ms[j][i] = 1
    y_for_ms = y_for_ms * 1j

    m = np.cos(fi) * x_for_ms + np.sin(fi) * y_for_ms

    return linalg.expm(-1j * m * hi / 2)
def make_ms_matrix(N, fi, hi, i, j, k, l):

    if i == j:
        return
    if i > j:
        i, j = j, i
    x_for_ms1 = np.zeros((N, N))
    x_for_ms1[i][j] = 1
    x_for_ms1[j][i] = 1
    y_for_ms1 = np.zeros((N, N))
    y_for_ms1[i][j] = -1
    y_for_ms1[j][i] = 1
    y_for_ms1 = 1j * y_for_ms1
    if k == l:
        return
    if k > l:
        k, l = l, k
    x_for_ms2 = np.zeros((N, N))
    x_for_ms2[k][l] = 1
    x_for_ms2[l][k] = 1
    y_for_ms2 = np.zeros((N, N))
    y_for_ms2[k][l] = -1
    y_for_ms2[l][k] = 1
    y_for_ms1 = 1j * y_for_ms1

    m = np.kron((np.cos(fi) * x_for_ms1 + np.sin(fi) * y_for_ms1), (np.cos(fi) * x_for_ms2 + np.sin(fi) * y_for_ms2))

    m = -1j * m * hi / 2
    return linalg.expm(m)


# Класс для создания двухкудитных гейтов
class TwoQS_Plus(gate_features.TwoQubitGate
                      ):

    def __init__(self, fi,hi,coaf, diag_i='XX'):
        #self.mat = mat
        self.diag_info = diag_i
        self.coaf = coaf
        self.fii = fi
        self.hii = hi

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(3, self.fii, self.hii,self.coaf[0],self.coaf[1],self.coaf[2],self.coaf[3])
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))


# Классы для создания однокудитных гейтов
class U(cirq.Gate):
    def __init__(self, mat, diag_i='R'):
        self.mat = mat
        self.diag_info = diag_i

    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return self.mat

    def _circuit_diagram_info_(self, args):
        return self.diag_info
class X1(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'X1'


def encoding(cirquit, mask, q_mask, v):
    for o in range(B):
        dln = 10
        u1 = U(R(v[0 + o * dln], v[1 + o * dln], mask[o][0], mask[o][1]), 'Rx(-π)12')
        u2 = U(R(v[2 + o * dln], v[3 + o * dln], mask[o][0], mask[o][1]), 'Ry(π/2)01')
        u3 = U(R(v[4 + o * dln], v[5 + o * dln], mask[o][2], mask[o][3]), 'Ry(-π/2)01')
        u4 = U(R(v[6 + o * dln], v[7 + o * dln], mask[o][2], mask[o][3]), 'Rx(-π)01')

        xx = TwoQS_Plus(v[8 + o * dln], v[9 + o * dln], [mask[o][0], mask[o][1], mask[o][2], mask[o][3]])
        cirquit.append([u1(q_mask[o][0]), u3(q_mask[o][1])], strategy=InsertStrategy.INLINE)
        cirquit.append([xx(q_mask[o][0], q_mask[o][1])], strategy=InsertStrategy.INLINE)
        cirquit.append([u2(q_mask[o][0]), u4(q_mask[o][1])], strategy=InsertStrategy.INLINE)

x01 = X1()
plotus = []
def operation(v):
    vsp = []
    for i in range(B):
        vsp.append(v)
    vsp = np.array(vsp)
    v = np.reshape(vsp, (1, B * 10))[0]

    # Проходимся по всем 8 базисным состояниям из кубитного подпр-ва
    ans = 0
    for i1 in range(2):
        for i2 in range(2):
            for i3 in range(2):

                circuit1 = cirq.Circuit()
                qutrits1 = []
                qutrits1.append(cirq.LineQid(0, dimension=3))
                qutrits1.append(cirq.LineQid(1, dimension=3))
                qutrits1.append(cirq.LineQid(2, dimension=3))

                q1, q2, q3 = qutrits1[0], qutrits1[1], qutrits1[2]

                # Q_mask = [(q1, q3), (q3, q1), (q2, q3)] # для 3 MS-ов
                # Q_mask = [(q1, q3), (q3, q1), (q2, q3), (q3, q2), (q1, q2)] # для 4 MS-ов
                Q_mask = [(q1, q3), (q3, q1), (q2, q3), (q3, q2), (q1, q2), (q2, q1)] # для 6 MS-ов

                # mask = [(0, 2, 0, 2), (0, 1, 0, 1), (0, 2, 1, 2)] # для 3 MS-ов
                # mask = [(0, 2, 0, 2), (0, 1, 0, 1), (0, 2, 1, 2), (0, 1, 0, 1), (0, 2, 0, 2)] # для 5 MS-ов
                mask = [(0, 2, 0, 2), (0, 1, 0, 1), (0, 2, 1, 2), (0, 1, 0, 1), (0, 2, 0, 2), (0, 1, 0, 1)] # для 6 MS-ов

                for j in range(i1):
                    circuit1.append([x01(q1)], strategy=InsertStrategy.INLINE)
                for j in range(i2):
                    circuit1.append([x01(q2)], strategy=InsertStrategy.INLINE)
                for j in range(i3):
                    circuit1.append([x01(q3)], strategy=InsertStrategy.INLINE)

                encoding(circuit1, mask, Q_mask, v)

                ro_ab = cirq.final_state_vector(circuit1, qubit_order=qutrits1)
                ans += abs((ro_ab[9:] * np.conj(ro_ab[9:])).sum())

    plotus.append(ans/8)
    print(ans / 8)

    return ans / 8

B = 6

# guess вар1
guess =np.array([np.pi / 2, np.pi / 2,0,-np.pi, np.pi / 2, -np.pi / 2, 0, 0,0, -np.pi, 0, 0,np.pi / 2, np.pi / 2,0,-np.pi, np.pi / 2, -np.pi / 2, 0, 0,0, -np.pi, 0, 0,np.pi / 2, np.pi / 2,0,-np.pi, np.pi / 2, -np.pi / 2, 0, 0,0, -np.pi, 0, 0,np.pi / 2, np.pi / 2,0,-np.pi, np.pi / 2, -np.pi / 2, 0, 0,0, -np.pi, 0, 0,np.pi / 2, np.pi / 2,0,-np.pi, np.pi / 2, -np.pi / 2, 0, 0,0, -np.pi, 0, 0,np.pi / 2, np.pi / 2,0,-np.pi, np.pi / 2, -np.pi / 2, 0, 0,0, -np.pi, 0, 0])
guess = guess[0:10]

# guess вар2
guess = np.array([0,0,0,0,0,0,0,0,0,0])

# Добавляем рандомные сдвиги к элементам guess
delta = np.pi
for i in range(10):
    guess[i] = guess[i] + random.randint(-1000, 1000) / 1000 * delta

guess = np.array(guess)
print(operation(guess))

bnds = []
for i in range(10):
    bnds.append((-np.pi, np.pi))

res1 = scipy.optimize.minimize(operation, guess, method= 'COBYLA', bounds=bnds)
print(res1)
print(list(res1.x))
print()
print(guess)
plx = np.arange(0, len(plotus))
plt.scatter(plx, plotus, s = 5)
plt.show()
