import cirq
import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
from cirq.circuits import InsertStrategy
import scipy
from scipy import linalg
from cirq import protocols
from cirq.testing import gate_features
import random


# Функции нативных гейтов
def R(fi, hi, i=0, j=1):
    N = 3
    if i == j:
        return np.eye(N)
    if i > j:
        i, j = j, i
    x_for_ms = np.zeros((N, N))
    x_for_ms[i][j] = 1
    x_for_ms[j][i] = 1
    y_for_ms = np.zeros((N, N))
    y_for_ms[i][j] = -1
    y_for_ms[j][i] = 1
    y_for_ms = y_for_ms * 1j

    m = np.cos(fi) * x_for_ms + np.sin(fi) * y_for_ms

    return linalg.expm(-1j * m * hi / 2)
def make_ms_matrix(N, fi, hi, i, j, k, l):

    if i == j:
        return
    if i > j:
        i, j = j, i
    x_for_ms1 = np.zeros((N, N))
    x_for_ms1[i][j] = 1
    x_for_ms1[j][i] = 1
    y_for_ms1 = np.zeros((N, N))
    y_for_ms1[i][j] = -1
    y_for_ms1[j][i] = 1
    y_for_ms1 = 1j * y_for_ms1
    if k == l:
        return
    if k > l:
        k, l = l, k
    x_for_ms2 = np.zeros((N, N))
    x_for_ms2[k][l] = 1
    x_for_ms2[l][k] = 1
    y_for_ms2 = np.zeros((N, N))
    y_for_ms2[k][l] = -1
    y_for_ms2[l][k] = 1
    y_for_ms1 = 1j * y_for_ms1

    m = np.kron((np.cos(fi) * x_for_ms1 + np.sin(fi) * y_for_ms1), (np.cos(fi) * x_for_ms2 + np.sin(fi) * y_for_ms2))

    m = -1j * m * hi / 2
    return linalg.expm(m)


# Класс для создания двухкудитных гейтов
class TwoQuditMSGate01(gate_features.TwoQubitGate
                      ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(3, 0, np.pi / 2,0,1,0,1)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))

class rTwoQuditMSGate01(gate_features.TwoQubitGate
                      ):

    def _json_dict_(self):
        return {
            'cirq_type': self.__class__.__name__
        }

    @classmethod
    def _from_json_dict_(cls, **kwargs):
        return cls()

    def _qid_shape_(self):
        return (3, 3,)

    def _unitary_(self):
        matrix = make_ms_matrix(3, 0, -np.pi / 2,0,1,0,1)
        return matrix

    def num_controls(self):
        return 2

    def _circuit_diagram_info_(self, args: 'cirq.CircuitDiagramInfoArgs'
                               ) -> 'cirq.CircuitDiagramInfo':
        return protocols.CircuitDiagramInfo(
            wire_symbols=('XX0101',
                          'XX0101'))


def CX(cirquit, q1, q2):
    u1 = U(R(np.pi/2, np.pi/2, 0, 1), 'Rx(-π)12')
    u2 = U(R(0, - np.pi , 0, 1), 'Ry(π/2)01')
    u3 = U(R(0, -np.pi, 0, 1), 'Rx(-π)01')
    u4 = U(R(np.pi / 2, -np.pi / 2, 0, 1), 'Ry(-π/2)01')
    xx = TwoQuditMSGate01()
    cirquit.append([u1(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([xx(q1, q2)], strategy=InsertStrategy.INLINE)
    cirquit.append([u2(q1), u3(q2)], strategy=InsertStrategy.INLINE)
    cirquit.append([u4(q1)], strategy=InsertStrategy.INLINE)
def rCX(cirquit, q1, q2):
    u1 = U(R(np.pi/2, - np.pi / 2, 0, 1), 'Rx(-π)12')
    u2 = U(R(0, np.pi, 0, 1), 'Ry(π/2)01')
    u3 = U(R(0, np.pi, 0, 1), 'Rx(-π)01')
    u4 = U(R(np.pi / 2, np.pi / 2, 0, 1), 'Ry(-π/2)01')
    xx = rTwoQuditMSGate01()
    cirquit.append([u4(q1)], strategy=InsertStrategy.INLINE)
    cirquit.append([u2(q1), u3(q2)], strategy=InsertStrategy.INLINE)
    cirquit.append([xx(q1, q2)], strategy=InsertStrategy.INLINE)
    cirquit.append([u1(q1)], strategy=InsertStrategy.INLINE)

# Классы для создания однокудитных гейтов
class U(cirq.Gate):
    def __init__(self, mat, diag_i='R'):
        self.mat = mat
        self.diag_info = diag_i

    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return self.mat

    def _circuit_diagram_info_(self, args):
        return self.diag_info
    
class X01(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'X01'
class X02(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'X02'
class H(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(0, np.pi, 0, 1) @ R(np.pi / 2, np.pi / 2, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'U_enc'
class Hr(cirq.Gate):
    def _qid_shape_(self):
        return (3,)

    def _unitary_(self):
        return R(np.pi / 2, -np.pi / 2, 0, 1) @ R(0, -np.pi, 0, 1)

    def _circuit_diagram_info_(self, args):
        return 'U_enc'


    
x01 = X01()
x02 = X02()
h = H()
hr = Hr()


def encoding(circuit1, q1,q2,q3):
    ###1)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)

    CX(circuit1, q1, q3)

    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)

    ###2)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)

    CX(circuit1, q3, q1)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)

    ###3)

    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)

    CX(circuit1, q2, q3)

    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)

    ###4)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    CX(circuit1, q3, q2)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    ###5)

    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    CX(circuit1, q1, q2)

    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    ###6)

    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)

    CX(circuit1, q2, q1)

    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)


def decoding(circuit1, q1,q2,q3):
    ###6)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)

    rCX(circuit1, q2, q1)

    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)

    ###5)

    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    rCX(circuit1, q1, q2)

    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    ###4)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    rCX(circuit1, q3, q2)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)

    ###3)

    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)

    rCX(circuit1, q2, q3)

    circuit1.append([x02(q2)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)

    ###2)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)

    CX(circuit1, q3, q1)

    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)

    ###1)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)

    rCX(circuit1, q1, q3)

    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q1)], strategy=InsertStrategy.INLINE)
    circuit1.append([x02(q3)], strategy=InsertStrategy.INLINE)
    
    
sim = cirq.Simulator()
circuit1 = cirq.Circuit()
qutrits1 = []
qutrits1.append(cirq.LineQid(0, dimension=3))
qutrits1.append(cirq.LineQid(1, dimension=3))
qutrits1.append(cirq.LineQid(2, dimension=3))
qutrits1.append(cirq.LineQid(3, dimension=3))

q1, q2, q3= qutrits1[0], qutrits1[1], qutrits1[2]

q4 = qutrits1[3]


# cмена нач сост:
circuit1.append([h(q1)], strategy=InsertStrategy.INLINE)
#circuit1.append([h(q2)], strategy=InsertStrategy.INLINE)
#circuit1.append([h(q3)], strategy=InsertStrategy.INLINE)


encoding(circuit1, q1,q2,q3)

q1, q4 = q4, q1

decoding(circuit1, q1, q2, q3)

circuit1.append([hr(q1)], strategy=InsertStrategy.INLINE)
#circuit1.append([hr(q2)], strategy=InsertStrategy.INLINE)
#circuit1.append([hr(q3)], strategy=InsertStrategy.INLINE)

res1 = sim.simulate(circuit1)
ro_ab = cirq.final_density_matrix(circuit1, qubit_order=qutrits1)

print(ro_ab[0][0])




